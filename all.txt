

# Plik /Users/kfn/gNb/internal/bot/manager.go
package bot

import (
	"context"
	"encoding/json"
	"fmt"
	"os"
	"sync"
	"time"

	"github.com/kofany/gNb/internal/auth"
	"github.com/kofany/gNb/internal/config"
	"github.com/kofany/gNb/internal/types"
	"github.com/kofany/gNb/internal/util"
)

// Ensure BotManager implements types.BotManager
var _ types.BotManager = (*BotManager)(nil)

// BotManager manages multiple IRC bots
type BotManager struct {
	bots                []types.Bot
	owners              auth.OwnerList
	wg                  sync.WaitGroup
	stopChan            chan struct{}
	nickManager         types.NickManager
	commandBotIndex     int
	mutex               sync.Mutex
	lastMassCommand     map[string]time.Time
	massCommandCooldown time.Duration
	wordPool            []string
	wordPoolMutex       sync.Mutex
	reactionRequests    map[string]types.ReactionRequest
	reactionMutex       sync.Mutex
	ctx                 context.Context
	cancel              context.CancelFunc
	errorHandled        bool       // Dodaj flagę do obsługi błędów
	errorMutex          sync.Mutex // Mutex do kontrolowania dostępu do errorHandled
	totalCreatedBots    int
}

// NewBotManager creates a new BotManager instance
func NewBotManager(cfg *config.Config, owners auth.OwnerList, nm types.NickManager) *BotManager {
	ctx, cancel := context.WithCancel(context.Background())
	requiredWords := len(cfg.Bots)*3 + 10 // 3 words per bot (nick, ident, realname) + 10 spare

	wordPool, err := util.GetWordsFromAPI(
		cfg.Global.NickAPI.URL,
		cfg.Global.NickAPI.MaxWordLength,
		cfg.Global.NickAPI.Timeout,
		requiredWords,
	)

	if err != nil {
		util.Error("Failed to get words from API: %v", err)
		wordPool = make([]string, requiredWords)
		for i := range wordPool {
			wordPool[i] = util.GenerateFallbackNick()
		}
	}

	manager := &BotManager{
		bots:                make([]types.Bot, len(cfg.Bots)),
		totalCreatedBots:    len(cfg.Bots),
		owners:              owners,
		stopChan:            make(chan struct{}),
		nickManager:         nm,
		lastMassCommand:     make(map[string]time.Time),
		massCommandCooldown: time.Duration(cfg.Global.MassCommandCooldown) * time.Second,
		wordPool:            wordPool,
		wordPoolMutex:       sync.Mutex{},
		reactionRequests:    make(map[string]types.ReactionRequest),
		ctx:                 ctx,
		cancel:              cancel,
	}

	// Creating bots
	for i, botCfg := range cfg.Bots {
		bot := NewBot(&botCfg, &cfg.Global, nm, manager)
		bot.SetOwnerList(manager.owners)
		bot.SetChannels(cfg.Channels)
		bot.SetBotManager(manager)
		bot.SetNickManager(nm)
		manager.bots[i] = bot
		util.Debug("BotManager added bot %s", bot.GetCurrentNick())
	}

	nm.SetBots(manager.bots)
	return manager
}

// StartBots starts all bots and connects them to their servers
func (bm *BotManager) StartBots() {
	botChannel := make(chan types.Bot, len(bm.bots))
	for _, bot := range bm.bots {
		botChannel <- bot
	}

	var wg sync.WaitGroup
	for i := 0; i < len(bm.bots); i++ {
		wg.Add(1)
		go func() {
			defer wg.Done()
			for bot := range botChannel {
				bm.startBotWithRetry(bot)
				time.Sleep(time.Second) // Krótkie opóźnienie przed uruchomieniem kolejnego bota
			}
		}()
	}

	close(botChannel)
	wg.Wait()
}

func (bm *BotManager) startBotWithRetry(bot types.Bot) {
	maxRetries := 3
	retryDelay := time.Second * 5

	for attempt := 1; attempt <= maxRetries; attempt++ {
		select {
		case <-bm.ctx.Done():
			return // Zakończ, jeśli kontekst został anulowany
		default:
			err := bot.Connect()
			if err == nil {
				util.Info("Bot %s connected successfully", bot.GetCurrentNick())
				return
			}

			util.Warning("Failed to connect bot %s (attempt %d/%d): %v",
				bot.GetCurrentNick(), attempt, maxRetries, err)

			if attempt < maxRetries {
				select {
				case <-time.After(retryDelay):
				case <-bm.ctx.Done():
					return
				}
			}
		}
	}

	util.Error("Failed to connect bot %s after %d attempts",
		bot.GetCurrentNick(), maxRetries)
}

// Stop safely shuts down all bots
func (bm *BotManager) Stop() {
	bm.cancel() // Anuluj kontekst, aby zasygnalizować wszystkim goroutynom, że powinny się zakończyć
	close(bm.stopChan)
	bm.wg.Wait()
	for _, bot := range bm.bots {
		bot.Quit("Shutting down")
	}
	util.Info("All bots have been stopped.")
}

// CanExecuteMassCommand checks if a mass command can be executed
func (bm *BotManager) CanExecuteMassCommand(cmdName string) bool {
	bm.mutex.Lock()
	defer bm.mutex.Unlock()

	lastExecution, exists := bm.lastMassCommand[cmdName]
	if !exists || time.Since(lastExecution) > bm.massCommandCooldown {
		bm.lastMassCommand[cmdName] = time.Now()
		util.Debug("BotManager: Mass command %s can be executed", cmdName)
		return true
	}

	util.Debug("BotManager: Mass command %s is on cooldown", cmdName)
	return false
}

func (bm *BotManager) AddOwner(ownerMask string) error {
	bm.mutex.Lock()
	defer bm.mutex.Unlock()

	// Check if owner already exists
	for _, owner := range bm.owners.Owners {
		if owner == ownerMask {
			return fmt.Errorf("owner '%s' already exists", ownerMask)
		}
	}

	bm.owners.Owners = append(bm.owners.Owners, ownerMask)

	// Save to file
	return bm.saveOwnersToFile()
}

func (bm *BotManager) RemoveOwner(ownerMask string) error {
	bm.mutex.Lock()
	defer bm.mutex.Unlock()

	index := -1
	for i, owner := range bm.owners.Owners {
		if owner == ownerMask {
			index = i
			break
		}
	}

	if index == -1 {
		return fmt.Errorf("owner '%s' not found", ownerMask)
	}

	bm.owners.Owners = append(bm.owners.Owners[:index], bm.owners.Owners[index+1:]...)

	// Save to file
	return bm.saveOwnersToFile()
}

func (bm *BotManager) GetOwners() []string {
	bm.mutex.Lock()
	defer bm.mutex.Unlock()

	ownersCopy := make([]string, len(bm.owners.Owners))
	copy(ownersCopy, bm.owners.Owners)
	return ownersCopy
}

func (bm *BotManager) saveOwnersToFile() error {
	jsonData, err := json.MarshalIndent(bm.owners, "", "  ")
	if err != nil {
		return err
	}

	err = os.WriteFile("configs/owners.json", jsonData, 0644)
	if err != nil {
		return err
	}

	// Update owner list in bots
	for _, bot := range bm.bots {
		bot.SetOwnerList(bm.owners)
	}

	return nil
}

// GetBots returns a copy of the bot slice
func (bm *BotManager) GetBots() []types.Bot {
	bm.mutex.Lock()
	defer bm.mutex.Unlock()

	botsCopy := make([]types.Bot, len(bm.bots))
	copy(botsCopy, bm.bots)
	return botsCopy
}

// GetNickManager returns the NickManager
func (bm *BotManager) GetNickManager() types.NickManager {
	return bm.nickManager
}

// SetMassCommandCooldown sets the cooldown duration for mass commands
func (bm *BotManager) SetMassCommandCooldown(duration time.Duration) {
	bm.mutex.Lock()
	defer bm.mutex.Unlock()
	bm.massCommandCooldown = duration
}

// GetMassCommandCooldown returns the current cooldown duration for mass commands
func (bm *BotManager) GetMassCommandCooldown() time.Duration {
	bm.mutex.Lock()
	defer bm.mutex.Unlock()
	return bm.massCommandCooldown
}

func (bm *BotManager) CollectReactions(channel, message string, action func() error) {
	bm.reactionMutex.Lock()
	defer bm.reactionMutex.Unlock()

	key := channel + ":" + message
	now := time.Now()

	if req, exists := bm.reactionRequests[key]; exists && now.Sub(req.Timestamp) < 5*time.Second {
		return // Ignore duplicates within 5 seconds
	}

	// Execute action
	if action != nil {
		err := action()
		if err != nil {
			bm.errorMutex.Lock()
			if !bm.errorHandled {
				bm.SendSingleMsg(channel, fmt.Sprintf("Error: %v", err))
				bm.errorHandled = true            // Ustaw flagę po obsłużeniu błędu
				go bm.cleanupReactionRequest(key) // Wywołaj cleanup po błędzie
			}
			bm.errorMutex.Unlock()
			return
		}
	}

	if message != "" {
		bm.SendSingleMsg(channel, message)
	}

	// Save request to ignore duplicates for the next 5 seconds
	bm.reactionRequests[key] = types.ReactionRequest{
		Channel:   channel,
		Message:   message,
		Timestamp: now,
		Action:    action,
	}

	// Run cleanup after 5 seconds for successful command
	go bm.cleanupReactionRequest(key)
}

// Zaktualizowana funkcja cleanupReactionRequest
func (bm *BotManager) cleanupReactionRequest(key string) {
	time.Sleep(5 * time.Second)
	bm.reactionMutex.Lock()
	defer bm.reactionMutex.Unlock()

	// Usuń zapis reakcji
	delete(bm.reactionRequests, key)

	// Resetuj flagę błędu po zakończeniu reakcji
	bm.errorMutex.Lock()
	bm.errorHandled = false
	bm.errorMutex.Unlock()
}

func (bm *BotManager) SendSingleMsg(channel, message string) {
	bm.mutex.Lock()
	defer bm.mutex.Unlock()

	if len(bm.bots) == 0 {
		return
	}
	bot := bm.bots[bm.commandBotIndex]
	bm.commandBotIndex = (bm.commandBotIndex + 1) % len(bm.bots)
	bot.SendMessage(channel, message)
}

func (bm *BotManager) GetTotalCreatedBots() int {
	return bm.totalCreatedBots
}

# Koniec /Users/kfn/gNb/internal/bot/manager.go

# Plik /Users/kfn/gNb/internal/config/config.go
package config

import (
	"fmt"
	"os"

	"github.com/fatih/color"

	"gopkg.in/yaml.v2"
)

type Config struct {
	Global   GlobalConfig `yaml:"global"`
	Bots     []BotConfig  `yaml:"bots"`
	Channels []string     `yaml:"channels"`
}

type GlobalConfig struct {
	LogLevel            string   `yaml:"log_level"`
	IsonInterval        int      `yaml:"ison_interval"`
	MaxNickLength       int      `yaml:"max_nick_length"`
	CommandPrefixes     []string `yaml:"owner_command_prefixes"`
	NickAPI             NickAPI  `yaml:"nick_api"`
	Channels            []string `yaml:"channels"`
	ReconnectRetries    int      `yaml:"reconnect_retries"`
	ReconnectInterval   int      `yaml:"reconnect_interval"`
	MassCommandCooldown int      `yaml:"mass_command_cooldown"`
}

type NickAPI struct {
	URL           string `yaml:"url"`
	MaxWordLength int    `yaml:"max_word_length"`
	Timeout       int    `yaml:"timeout"`
}

type BotConfig struct {
	Server string `yaml:"server"`
	Port   int    `yaml:"port"`
	SSL    bool   `yaml:"ssl"`
	Vhost  string `yaml:"vhost"`
}

func LoadConfig(filename string) (*Config, error) {
	data, err := os.ReadFile(filename)
	if err != nil {
		return nil, err
	}
	var config Config
	err = yaml.Unmarshal(data, &config)
	if err != nil {
		return nil, err
	}
	return &config, nil
}

func (cfg *BotConfig) ServerAddress() string {
	return fmt.Sprintf("%s:%d", cfg.Server, cfg.Port)
}

func CheckAndCreateConfigFiles() error {
	folders := []string{"configs", "data"}
	files := map[string]string{
		"configs/config.yaml": `global:
  # Please do not play with global values if you are not sure what you are doing
  log_level: warning  # Logging level: debug, info, warning, error
  ison_interval: 1  # Interval in seconds between ISON requests
  nick_api:
    url: 'https://i.got.al/words.php'
    max_word_length: 12
    timeout: 5  # Timeout for API requests in seconds
  max_nick_length: 14
  owner_command_prefixes:
    - "!"
    - "."
    - "@"
  reconnect_retries: 3
  reconnect_interval: 2
  mass_command_cooldown: 5

bots:
  - server: mirc.irc.al  #example server
    port: 6667
    ssl: false
    vhost: 192.168.176.35  # example IPv4
  - server: mirc.irc.al
    port: 6667
    ssl: false
    vhost: 2a02:2454:ffff:0101:1c56:2b73:771e:f9dd  # example IPv6

channels:
  - "#irc.al"  #example channel

owner_command_prefixes:
  - "!"
  - "."
  - "@"`,
		"configs/owners.json": `{
  "owners": [
    "*!*ident@hostname"
  ]
}`,
		"data/nicks.json": `{
  "nicks": [
    "CoolBot",
    "NickKeeper",
    "IRCGuardian",
    "NetWatcher"
  ]
}`,
	}

	missingItems := []string{}

	cyan := color.New(color.FgCyan).SprintFunc()
	green := color.New(color.FgGreen).SprintFunc()
	red := color.New(color.FgRed).SprintFunc()
	yellow := color.New(color.FgYellow).SprintFunc()

	fmt.Println(cyan("Checking core files:"))

	// Check and create folders
	for _, folder := range folders {
		fmt.Printf("%-25s", cyan(folder))
		if _, err := os.Stat(folder); os.IsNotExist(err) {
			if err := os.MkdirAll(folder, 0755); err != nil {
				fmt.Println(red("[ ERROR ]"))
				return fmt.Errorf("failed to create folder %s: %v", folder, err)
			}
			missingItems = append(missingItems, folder)
			fmt.Println(yellow("[ CREATED ]"))
		} else {
			fmt.Println(green("[ OK ]"))
		}
	}

	// Check and create files
	for file, content := range files {
		fmt.Printf("%-25s", cyan(file))
		if _, err := os.Stat(file); os.IsNotExist(err) {
			if err := os.WriteFile(file, []byte(content), 0644); err != nil {
				fmt.Println(red("[ ERROR ]"))
				return fmt.Errorf("failed to create file %s: %v", file, err)
			}
			missingItems = append(missingItems, file)
			fmt.Println(yellow("[ CREATED ]"))
		} else {
			fmt.Println(green("[ OK ]"))
		}
	}

	if len(missingItems) > 0 {
		fmt.Println("\n" + yellow("The following items were missing and have been created with example content:"))
		for _, item := range missingItems {
			fmt.Printf("- %s\n", cyan(item))
		}
		fmt.Println("\n" + yellow("Please edit these files with your desired configuration before running the bot again."))
		fmt.Println(red("Exiting the program."))
		os.Exit(1)
	}

	fmt.Println("\n" + green("All necessary folders and files are present."))
	return nil
}

# Koniec /Users/kfn/gNb/internal/config/config.go

# Plik /Users/kfn/gNb/internal/dcc/dcc_cmd.go
package dcc

import (
	"context"
	"crypto/tls"
	"fmt"
	"io"
	"math/rand"
	"net"
	"net/http"
	"os"
	"os/user"
	"strings"
	"time"

	"github.com/kofany/gNb/internal/types"
)

// processCommand przetwarza komendy od użytkownika
func (dt *DCCTunnel) processCommand(command string) {
	fields := strings.Fields(command)
	if len(fields) == 0 {
		return
	}

	// Usuń prefiks '.' i przekonwertuj na wielkie litery
	cmd := strings.ToUpper(strings.TrimPrefix(fields[0], "."))

	switch cmd {
	case "MSG":
		dt.handleMsgCommand(fields[1:])
	case "JOIN":
		dt.handleJoinCommand(fields[1:])
	case "PART":
		dt.handlePartCommand(fields[1:])
	case "MODE":
		dt.handleModeCommand(fields[1:])
	case "KICK":
		dt.handleKickCommand(fields[1:])
	case "QUIT":
		dt.handleQuitCommand(fields[1:])
	case "NICK":
		dt.handleNickCommand(fields[1:])
	case "RAW":
		dt.handleRawCommand(fields[1:])
	case "HELP":
		dt.sendHelpMessage()
	case "MJOIN":
		dt.handleMassJoinCommand(fields[1:])
	case "MPART":
		dt.handleMassPartCommand(fields[1:])
	case "MRECONNECT":
		dt.handleMassReconnectCommand(fields[1:])
	case "ADDNICK":
		dt.handleAddNickCommand(fields[1:])
	case "DELNICK":
		dt.handleDelNickCommand(fields[1:])
	case "LISTNICKS":
		dt.handleListNicksCommand(fields[1:])
	case "ADDOWNER":
		dt.handleAddOwnerCommand(fields[1:])
	case "DELOWNER":
		dt.handleDelOwnerCommand(fields[1:])
	case "LISTOWNERS":
		dt.handleListOwnersCommand(fields[1:])
	case "INFO":
		dt.handleInfoCommand(fields[1:])
	case "BOTS":
		dt.handleBotsCommand(fields[1:])
	case "SERVERS":
		dt.handleServersCommand(fields[1:])
	default:
		dt.sendToClient(fmt.Sprintf("Unknown command: %s", cmd))
	}
}

// Handlery podstawowych komend

func (dt *DCCTunnel) handleBotsCommand(args []string) {
	bm := dt.bot.GetBotManager()
	if bm == nil {
		dt.sendToClient("BotManager is not available.")
		return
	}

	bots := bm.GetBots()
	totalCreatedBots := bm.GetTotalCreatedBots() // Dodamy tę metodę w BotManager
	totalBotsNow := len(bots)

	// Liczymy w pełni połączone boty
	totalConnectedBots := 0
	var connectedBotNicks []string
	for _, bot := range bots {
		if bot.IsConnected() {
			totalConnectedBots++
			connectedBotNicks = append(connectedBotNicks, bot.GetCurrentNick())
		}
	}

	if len(args) == 0 {
		// Bez dodatkowych argumentów, wyświetlamy podsumowanie
		output := fmt.Sprintf(
			"Total created bots: %d\nTotal bots now: %d\nTotal fully connected bots: %d",
			totalCreatedBots, totalBotsNow, totalConnectedBots)
		dt.sendToClient(output)
	} else if len(args) == 1 && strings.ToLower(args[0]) == "n" {
		// Wyświetlamy nicki w pełni połączonych botów
		if totalConnectedBots == 0 {
			dt.sendToClient("No bots are currently connected.")
		} else {
			dt.sendToClient("Connected bots: " + strings.Join(connectedBotNicks, ", "))
		}
	} else {
		dt.sendToClient("Usage: .bots or .bots n")
	}
}

func (dt *DCCTunnel) handleMsgCommand(args []string) {
	if len(args) >= 2 {
		target := args[0]
		message := strings.Join(args[1:], " ")
		dt.bot.SendMessage(target, message)
	} else {
		dt.sendToClient("Usage: .msg <target> <message>")
	}
}

func (dt *DCCTunnel) handleJoinCommand(args []string) {
	if len(args) >= 1 {
		channel := args[0]
		dt.bot.JoinChannel(channel)
	} else {
		dt.sendToClient("Usage: .join <channel>")
	}
}

func (dt *DCCTunnel) handlePartCommand(args []string) {
	if len(args) >= 1 {
		channel := args[0]
		dt.bot.PartChannel(channel)
	} else {
		dt.sendToClient("Usage: .part <channel>")
	}
}

func (dt *DCCTunnel) handleModeCommand(args []string) {
	if len(args) >= 2 {
		target := args[0]
		modes := strings.Join(args[1:], " ")
		command := fmt.Sprintf("MODE %s %s", target, modes)
		dt.bot.SendRaw(command)
	} else if len(args) >= 1 {
		target := args[0]
		command := fmt.Sprintf("MODE %s", target)
		dt.bot.SendRaw(command)
	} else {
		dt.sendToClient("Usage: .mode <target> [modes] [args]")
	}
}

func (dt *DCCTunnel) handleKickCommand(args []string) {
	if len(args) >= 2 {
		channel := args[0]
		user := args[1]
		reason := ""
		if len(args) > 2 {
			reason = strings.Join(args[2:], " ")
		}
		command := fmt.Sprintf("KICK %s %s :%s", channel, user, reason)
		dt.bot.SendRaw(command)
	} else {
		dt.sendToClient("Usage: .kick <channel> <user> [reason]")
	}
}

func (dt *DCCTunnel) handleQuitCommand(_ []string) {
	dt.bot.Quit("Quit via DCC")
	dt.Stop()
}

func (dt *DCCTunnel) handleNickCommand(args []string) {
	if len(args) >= 1 {
		newNick := args[0]
		dt.bot.ChangeNick(newNick)
	} else {
		dt.sendToClient("Usage: .nick <newnick>")
	}
}

func (dt *DCCTunnel) handleRawCommand(args []string) {
	if len(args) >= 1 {
		rawCmd := strings.Join(args, " ")
		dt.bot.SendRaw(rawCmd)
	} else {
		dt.sendToClient("Usage: .raw <command>")
	}
}

func (dt *DCCTunnel) handleMassJoinCommand(args []string) {
	if len(args) >= 1 {
		channel := args[0]
		if bm := dt.bot.GetBotManager(); bm != nil {
			bm.CollectReactions(
				dt.bot.GetCurrentNick(),
				fmt.Sprintf("All bots are joining channel %s", channel),
				func() error {
					for _, bot := range bm.GetBots() {
						bot.JoinChannel(channel)
					}
					return nil
				},
			)
		}
	} else {
		dt.sendToClient("Usage: .mjoin <channel>")
	}
}

// Handlery komend masowych i administracyjnych

func (dt *DCCTunnel) handleMassPartCommand(args []string) {
	if len(args) >= 1 {
		channel := args[0]
		if bm := dt.bot.GetBotManager(); bm != nil {
			bm.CollectReactions(
				dt.bot.GetCurrentNick(),
				fmt.Sprintf("All bots are leaving channel %s", channel),
				func() error {
					for _, bot := range bm.GetBots() {
						bot.PartChannel(channel)
					}
					return nil
				},
			)
		}
	} else {
		dt.sendToClient("Usage: .mpart <channel>")
	}
}

func (dt *DCCTunnel) handleMassReconnectCommand(_ []string) {
	if bm := dt.bot.GetBotManager(); bm != nil {
		bm.CollectReactions(
			dt.bot.GetCurrentNick(),
			"All bots are reconnecting...",
			func() error {
				for _, bot := range bm.GetBots() {
					go bot.Reconnect()
				}
				return nil
			},
		)
	}
}

func (dt *DCCTunnel) handleAddNickCommand(args []string) {
	if len(args) >= 1 {
		nick := args[0]
		if bm := dt.bot.GetBotManager(); bm != nil {
			bm.CollectReactions(
				dt.bot.GetCurrentNick(),
				fmt.Sprintf("Nick '%s' has been added.", nick),
				func() error { return dt.bot.GetNickManager().AddNick(nick) },
			)
		}
	} else {
		dt.sendToClient("Usage: .addnick <nick>")
	}
}

func (dt *DCCTunnel) handleDelNickCommand(args []string) {
	if len(args) >= 1 {
		nick := args[0]
		if bm := dt.bot.GetBotManager(); bm != nil {
			bm.CollectReactions(
				dt.bot.GetCurrentNick(),
				fmt.Sprintf("Nick '%s' has been removed.", nick),
				func() error { return dt.bot.GetNickManager().RemoveNick(nick) },
			)
		}
	} else {
		dt.sendToClient("Usage: .delnick <nick>")
	}
}

func (dt *DCCTunnel) handleListNicksCommand(_ []string) {
	if bm := dt.bot.GetBotManager(); bm != nil {
		nicks := dt.bot.GetNickManager().GetNicks()
		dt.sendToClient(fmt.Sprintf("Current nicks: %s", strings.Join(nicks, ", ")))
	}
}

func (dt *DCCTunnel) handleAddOwnerCommand(args []string) {
	if len(args) >= 1 {
		ownerMask := args[0]
		if bm := dt.bot.GetBotManager(); bm != nil {
			bm.CollectReactions(
				dt.bot.GetCurrentNick(),
				fmt.Sprintf("Owner '%s' has been added.", ownerMask),
				func() error { return bm.AddOwner(ownerMask) },
			)
		}
	} else {
		dt.sendToClient("Usage: .addowner <mask>")
	}
}

func (dt *DCCTunnel) handleDelOwnerCommand(args []string) {
	if len(args) >= 1 {
		ownerMask := args[0]
		if bm := dt.bot.GetBotManager(); bm != nil {
			bm.CollectReactions(
				dt.bot.GetCurrentNick(),
				fmt.Sprintf("Owner '%s' has been removed.", ownerMask),
				func() error { return bm.RemoveOwner(ownerMask) },
			)
		}
	} else {
		dt.sendToClient("Usage: .delowner <mask>")
	}
}

func (dt *DCCTunnel) handleListOwnersCommand(_ []string) {
	if bm := dt.bot.GetBotManager(); bm != nil {
		owners := bm.GetOwners()
		dt.sendToClient(fmt.Sprintf("Current owners: %s", strings.Join(owners, ", ")))
	}
}

func (dt *DCCTunnel) handleInfoCommand(_ []string) {
	if bm := dt.bot.GetBotManager(); bm != nil {
		info := dt.generateSystemInfo()
		dt.sendToClient(info)
	}
}

// Funkcje pomocnicze

func (dt *DCCTunnel) generateSystemInfo() string {
	currentUser, err := user.Current()
	if err != nil {
		currentUser = &user.User{}
	}

	cwd, err := os.Getwd()
	if err != nil {
		cwd = "unknown"
	}

	serverHost := dt.bot.GetServerName()
	ips, _ := net.LookupIP(serverHost)
	var ipv4, ipv6 string
	for _, ip := range ips {
		if ip.To4() != nil {
			ipv4 = ip.String()
		} else {
			ipv6 = ip.String()
		}
	}

	externalIPv4 := dt.getExternalIP("tcp4")
	externalIPv6 := dt.getExternalIP("tcp6")

	return fmt.Sprintf(`
Bot Information:
---------------
Current Working Directory: %s
Username: %s
Home Directory: %s

Server Information:
------------------
Server Name: %s
Server IPv4: %s
Server IPv6: %s

External IP Information:
----------------------
External IPv4: %s
External IPv6: %s

Process Information:
------------------
Process ID: %d
Parent Process ID: %d`,
		cwd,
		currentUser.Username,
		currentUser.HomeDir,
		serverHost,
		ipv4,
		ipv6,
		externalIPv4,
		externalIPv6,
		os.Getpid(),
		os.Getppid())
}

func (dt *DCCTunnel) getExternalIP(network string) string {
	client := &http.Client{
		Transport: &http.Transport{
			TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
			DialContext: func(ctx context.Context, _, addr string) (net.Conn, error) {
				d := net.Dialer{Timeout: 5 * time.Second}
				return d.DialContext(ctx, network, addr)
			},
		},
		Timeout: 5 * time.Second,
	}

	resp, err := client.Get("https://ip.shr.al")
	if err != nil {
		return "unavailable"
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return "unavailable"
	}

	return strings.TrimSpace(string(body))
}

// Pomocnicza funkcja do generowania losowych nicków
func (dt *DCCTunnel) generateRandomNick() string {
	rand.Seed(time.Now().UnixNano())

	// Generowanie głównej części nicka (4-7 znaków)
	mainLength := rand.Intn(4) + 4
	mainPart := make([]byte, mainLength)

	for i := range mainPart {
		if rand.Intn(2) == 0 {
			mainPart[i] = byte('A' + rand.Intn(26))
		} else {
			mainPart[i] = byte('a' + rand.Intn(26))
		}
	}

	// Generowanie końcówki (1-4 znaki)
	suffixLength := rand.Intn(4) + 1
	suffixPart := make([]byte, suffixLength)

	for i := range suffixPart {
		choice := rand.Intn(3)
		if choice == 0 {
			suffixPart[i] = byte('A' + rand.Intn(26))
		} else if choice == 1 {
			suffixPart[i] = byte('a' + rand.Intn(26))
		} else {
			suffixPart[i] = byte('0' + rand.Intn(10))
		}
	}

	// Łączenie części nicka
	return fmt.Sprintf("%s%s", string(mainPart), string(suffixPart))
}

func colorCommand(command, description string) string {
	return fmt.Sprintf("%s %s", colorText(command, 9), description)
}

func (dt *DCCTunnel) sendHelpMessage() {
	helpMessage := boldText(colorText("\nAvailable commands:\n==================\n", 16)) + "\n" +
		colorText("[ Standard ] IRC commands:", 10) + "\n" +
		"--------------------\n" +
		colorCommand(".msg <target> <message>", "- Send a private message") + "\n" +
		colorCommand(".join <channel>", "- Join a channel") + "\n" +
		colorCommand(".part <channel>", "- Leave a channel") + "\n" +
		colorCommand(".mode <target> [modes] [args]", "- Change channel or user modes") + "\n" +
		colorCommand(".kick <channel> <user> [reason]", "- Kick a user") + "\n" +
		colorCommand(".quit", "- Disconnect the bot") + "\n" +
		colorCommand(".nick <newnick>", "- Change nickname") + "\n" +
		colorCommand(".raw <command>", "- Send raw IRC command") + "\n\n" +
		colorText("[ Mass ] commands (all bots on all nodes):", 10) + "\n" +
		"------------\n" +
		colorCommand(".mjoin <channel>", "- All bots join channel") + "\n" +
		colorCommand(".mpart <channel>", "- All bots leave channel") + "\n" +
		colorCommand(".mreconnect", "- Reconnect all bots (including linked bots)") + "\n\n" +
		colorText("[ BotNet ] Network commands:", 10) + "\n" +
		"---------------\n" +
		colorCommand(".minfo", "- Display info from all connected instances") + "\n\n" +
		colorCommand(".abots", "- Display all bots status across all nodes") + "\n\n" +
		colorText("[ Admin ] commands (For now only local node):", 10) + "\n" +
		"-------------\n" +
		colorCommand(".addnick <nick>", "- Add nick to catch list") + "\n" +
		colorCommand(".delnick <nick>", "- Remove nick from catch list") + "\n" +
		colorCommand(".listnicks", "- List nicks to catch") + "\n" +
		colorCommand(".addowner <mask>", "- Add owner mask") + "\n" +
		colorCommand(".delowner <mask>", "- Remove owner mask") + "\n" +
		colorCommand(".listowners", "- List owner masks") + "\n" +
		colorCommand(".info", "- Display detailed bot information") + "\n" +
		colorCommand(".bots", "- Show bot statistics") + "\n" +
		colorCommand(".bots n", "- Show list of connected bot nicknames") + "\n" +
		colorCommand(".servers", "- Show server connection statistics") + "\n" +
		colorCommand(".servers <nick>", "- Show server for specific bot") + "\n\n" +
		colorText("ISON monitoring:", 10) + "\n" +
		"--------------\n" +
		"Type " + boldText(".help") + " to see this message again.\n"

	dt.sendToClient(helpMessage)
}

func (dt *DCCTunnel) handleServersCommand(args []string) {
	bm := dt.bot.GetBotManager()
	if bm == nil {
		dt.sendToClient("BotManager is not available.")
		return
	}

	bots := bm.GetBots()
	connectedBots := make([]types.Bot, 0)
	for _, bot := range bots {
		if bot.IsConnected() {
			connectedBots = append(connectedBots, bot)
		}
	}

	if len(args) == 0 {
		// Bez argumentów, wyświetlamy statystyki serwerów
		serverCounts := make(map[string]int)
		for _, bot := range connectedBots {
			serverName := bot.GetServerName()
			serverCounts[serverName]++
		}

		if len(serverCounts) == 0 {
			dt.sendToClient("No bots are currently connected.")
		} else {
			var outputLines []string
			for server, count := range serverCounts {
				outputLines = append(outputLines, fmt.Sprintf("%s: %d", server, count))
			}
			dt.sendToClient("Server connections:\n" + strings.Join(outputLines, "\n"))
		}
	} else if len(args) == 1 {
		// Jeśli podano argument, traktujemy go jako nick bota
		botNick := args[0]
		var foundBot types.Bot
		for _, bot := range connectedBots {
			if strings.EqualFold(bot.GetCurrentNick(), botNick) {
				foundBot = bot
				break
			}
		}

		if foundBot != nil {
			serverName := foundBot.GetServerName()
			dt.sendToClient(fmt.Sprintf("Bot %s is connected to server: %s", botNick, serverName))
		} else {
			dt.sendToClient(fmt.Sprintf("Bot with nick '%s' is not found or not connected.", botNick))
		}
	} else {
		dt.sendToClient("Usage: .servers or .servers <bot_nick>")
	}
}

# Koniec /Users/kfn/gNb/internal/dcc/dcc_cmd.go

# Plik /Users/kfn/gNb/internal/dcc/dcc_formatter.go
package dcc

import (
	"fmt"
	"regexp"
	"strings"
	"time"

	"github.com/kofany/gNb/internal/irc"
)

// MessageFormatter formats IRC messages to a friendly format
type MessageFormatter struct {
	nickname     string
	timeFormat   string
	colorEnabled bool
	prefixes     map[string]string
}

// NewMessageFormatter creates a new instance of message formatter
func NewMessageFormatter(nickname string) *MessageFormatter {
	return &MessageFormatter{
		nickname:     nickname,
		timeFormat:   "15:04:05",
		colorEnabled: true,
		prefixes: map[string]string{
			"PRIVMSG": colorText("<*>", 9),  // Jasnozielony
			"NOTICE":  colorText("-*-", 13), // Różowy
			"JOIN":    colorText(">>>", 10), // Turkusowy
			"PART":    colorText("<<<", 12), // Niebieski
			"QUIT":    colorText("---", 5),  // Brązowy
			"NICK":    colorText("***", 6),  // Fioletowy
			"MODE":    colorText("***", 3),  // Zielony
			"KICK":    colorText("<!>", 4),  // Czerwony
		},
	}
}

// Helper functions for coloring and styling text
func colorText(text string, colorCode int) string {
	return fmt.Sprintf("\x03%02d%s\x03", colorCode, text)
}

func boldText(text string) string {
	return fmt.Sprintf("\x02%s\x02", text)
}

func underlineText(text string) string {
	return fmt.Sprintf("\x1F%s\x1F", text)
}

// FormatMessage formats a raw IRC message
func (mf *MessageFormatter) FormatMessage(raw string) string {
	event := irc.ParseIRCMessage(raw)
	if event == nil {
		return ""
	}

	switch event.Command {
	case "PRIVMSG":
		return mf.formatPrivMsg(event)
	case "NOTICE":
		return mf.formatNotice(event)
	case "JOIN":
		return mf.formatJoin(event)
	case "PART":
		return mf.formatPart(event)
	case "QUIT":
		return mf.formatQuit(event)
	case "NICK":
		return mf.formatNick(event)
	case "MODE":
		return mf.formatMode(event)
	case "KICK":
		return mf.formatKick(event)
	default:
		return mf.formatOther(event)
	}
}

// formatPrivMsg formats private messages
func (mf *MessageFormatter) formatPrivMsg(event *irc.Event) string {
	timestamp := colorText(time.Now().Format(mf.timeFormat), 14)
	sender := mf.formatNickname(event.Nick)
	target := ""
	if len(event.Args) > 0 {
		target = event.Args[0]
	}
	message := mf.formatText(event.Message)

	if target == mf.nickname {
		// Private message
		return fmt.Sprintf("[%s] %s %s",
			timestamp,
			sender,
			message)
	} else {
		// Channel message
		channel := colorText(target, 13)
		return fmt.Sprintf("[%s] %s %s: %s",
			timestamp,
			channel,
			sender,
			message)
	}
}

// formatNotice formats notices
func (mf *MessageFormatter) formatNotice(event *irc.Event) string {
	timestamp := colorText(time.Now().Format(mf.timeFormat), 14)
	sender := mf.formatNickname(event.Nick)
	message := mf.formatText(event.Message)

	return fmt.Sprintf("[%s] %s %s %s",
		timestamp,
		mf.prefixes["NOTICE"],
		sender,
		message)
}

// formatJoin formats join messages
func (mf *MessageFormatter) formatJoin(event *irc.Event) string {
	timestamp := colorText(time.Now().Format(mf.timeFormat), 14)
	nick := mf.formatNickname(event.Nick)
	channel := ""
	if len(event.Args) > 0 {
		channel = colorText(event.Args[0], 13)
	}

	return fmt.Sprintf("[%s] %s %s has joined %s",
		timestamp,
		mf.prefixes["JOIN"],
		nick,
		channel)
}

// formatPart formats part messages
func (mf *MessageFormatter) formatPart(event *irc.Event) string {
	timestamp := colorText(time.Now().Format(mf.timeFormat), 14)
	nick := mf.formatNickname(event.Nick)
	channel := ""
	if len(event.Args) > 0 {
		channel = colorText(event.Args[0], 13)
	}

	message := event.Message
	if message != "" {
		return fmt.Sprintf("[%s] %s %s has left %s (%s)",
			timestamp,
			mf.prefixes["PART"],
			nick,
			channel,
			mf.formatText(message))
	}

	return fmt.Sprintf("[%s] %s %s has left %s",
		timestamp,
		mf.prefixes["PART"],
		nick,
		channel)
}

// formatQuit formats quit messages
func (mf *MessageFormatter) formatQuit(event *irc.Event) string {
	timestamp := colorText(time.Now().Format(mf.timeFormat), 14)
	nick := mf.formatNickname(event.Nick)
	reason := mf.formatText(event.Message)

	return fmt.Sprintf("[%s] %s %s has quit (%s)",
		timestamp,
		mf.prefixes["QUIT"],
		nick,
		reason)
}

// formatNick formats nick change messages
func (mf *MessageFormatter) formatNick(event *irc.Event) string {
	timestamp := colorText(time.Now().Format(mf.timeFormat), 14)
	oldNick := mf.formatNickname(event.Nick)
	newNick := mf.formatNickname(event.Message)

	return fmt.Sprintf("[%s] %s %s is now known as %s",
		timestamp,
		mf.prefixes["NICK"],
		oldNick,
		newNick)
}

// formatMode formats mode changes
func (mf *MessageFormatter) formatMode(event *irc.Event) string {
	timestamp := colorText(time.Now().Format(mf.timeFormat), 14)
	nick := mf.formatNickname(event.Nick)
	target := ""
	modes := ""
	if len(event.Args) >= 2 {
		target = colorText(event.Args[0], 13)
		modes = colorText(strings.Join(event.Args[1:], " "), 3) // Zielony
	}

	return fmt.Sprintf("[%s] %s %s sets mode %s on %s",
		timestamp,
		mf.prefixes["MODE"],
		nick,
		modes,
		target)
}

// formatKick formats kick messages
func (mf *MessageFormatter) formatKick(event *irc.Event) string {
	timestamp := colorText(time.Now().Format(mf.timeFormat), 14)
	nick := mf.formatNickname(event.Nick)
	channel := ""
	user := ""
	reason := mf.formatText(event.Message)

	if len(event.Args) >= 2 {
		channel = colorText(event.Args[0], 13)
		user = mf.formatNickname(event.Args[1])
	}

	return fmt.Sprintf("[%s] %s %s has kicked %s from %s (%s)",
		timestamp,
		mf.prefixes["KICK"],
		nick,
		user,
		channel,
		reason)
}

// formatOther formats other types of messages
func (mf *MessageFormatter) formatOther(event *irc.Event) string {
	timestamp := colorText(time.Now().Format(mf.timeFormat), 14)
	cmd := colorText(event.Command, 6) // Fioletowy
	nick := mf.formatNickname(event.Nick)

	// Basic info
	info := fmt.Sprintf("[%s] %s %s", timestamp, cmd, nick)

	// Add arguments if any
	if len(event.Args) > 0 {
		args := colorText(strings.Join(event.Args, " "), 14)
		info += " " + args
	}

	// Add message if any
	if event.Message != "" {
		message := mf.formatText(event.Message)
		info += " :" + message
	}

	return info
}

// Helper functions for formatting

// formatNickname formats user's nickname
func (mf *MessageFormatter) formatNickname(nick string) string {
	if !mf.colorEnabled {
		return nick
	}

	if nick == mf.nickname {
		return boldText(colorText(nick, 10)) // Turkusowy i pogrubiony
	}
	return colorText(nick, 11) // Jasnoniebieski
}

// formatText formats message text
func (mf *MessageFormatter) formatText(text string) string {
	if !mf.colorEnabled {
		return text
	}
	return colorText(mf.processIRCFormatting(text), 14) // Szary
}

// processIRCFormatting processes IRC formatting codes
func (mf *MessageFormatter) processIRCFormatting(text string) string {
	if !mf.colorEnabled {
		// If colors are disabled, strip all formatting codes
		return stripIRCFormatting(text)
	}
	return text // Keep original formatting
}

// stripIRCFormatting strips IRC formatting codes
func stripIRCFormatting(text string) string {
	// Remove color codes (including parameters)
	colorRegex := regexp.MustCompile(`\x03\d{1,2}(?:,\d{1,2})?`)
	text = colorRegex.ReplaceAllString(text, "")

	// Remove other formatting codes
	formatCodes := []string{
		"\x02", // Bold
		"\x1D", // Italic
		"\x1F", // Underline
		"\x0F", // Reset formatting
		"\x16", // Reverse
	}

	for _, code := range formatCodes {
		text = strings.ReplaceAll(text, code, "")
	}

	return text
}

// Setters and getters

// SetColorEnabled enables or disables color output
func (mf *MessageFormatter) SetColorEnabled(enabled bool) {
	mf.colorEnabled = enabled
}

// SetTimeFormat sets the time format
func (mf *MessageFormatter) SetTimeFormat(format string) {
	mf.timeFormat = format
}

// SetPrefix sets the prefix for a given message type
func (mf *MessageFormatter) SetPrefix(msgType string, prefix string) {
	mf.prefixes[msgType] = prefix
}

// GetTimeFormat returns the current time format
func (mf *MessageFormatter) GetTimeFormat() string {
	return mf.timeFormat
}

// IsColorEnabled checks if coloring is enabled
func (mf *MessageFormatter) IsColorEnabled() bool {
	return mf.colorEnabled
}

// GetPrefix returns the prefix for a given message type
func (mf *MessageFormatter) GetPrefix(msgType string) string {
	if prefix, ok := mf.prefixes[msgType]; ok {
		return prefix
	}
	return colorText("***", 6) // Domyślny prefix w kolorze fioletowym
}

# Koniec /Users/kfn/gNb/internal/dcc/dcc_formatter.go

# Plik /Users/kfn/gNb/internal/dcc/dcc_tunnel.go
package dcc

import (
	"bufio"
	"fmt"
	"io"
	"net"
	"strings"
	"sync"
	"time"

	"github.com/kofany/gNb/internal/irc"
	"github.com/kofany/gNb/internal/types"
	"github.com/kofany/gNb/internal/util"
)

// DCCTunnel reprezentuje tunel DCC do komunikacji z botem
type DCCTunnel struct {
	conn          net.Conn
	bot           types.Bot
	active        bool
	mu            sync.Mutex
	ignoredEvents map[string]bool
	onStop        func()
	formatter     *MessageFormatter
	botManager    types.BotManager
	readDone      chan struct{}
	writeDone     chan struct{}
	sessionID     string
	partyLine     *PartyLine
	ownerNick     string // Dodane pole
}

type PartyLine struct {
	sessions   map[string]*DCCTunnel
	mutex      sync.RWMutex
	messageLog []PartyLineMessage
	maxLogSize int
}

type PartyLineMessage struct {
	Timestamp time.Time
	Sender    string
	Message   string
}

var (
	globalPartyLine *PartyLine
	partyLineOnce   sync.Once
)

// NewDCCTunnel tworzy nową instancję tunelu DCC
func NewDCCTunnel(bot types.Bot, ownerNick string, onStop func()) *DCCTunnel {
	sessionID := fmt.Sprintf("dcc-%s-%d", bot.GetCurrentNick(), time.Now().UnixNano())
	dt := &DCCTunnel{
		bot:           bot,
		active:        false,
		ignoredEvents: map[string]bool{"303": true},
		onStop:        onStop,
		formatter:     NewMessageFormatter(bot.GetCurrentNick()),
		botManager:    bot.GetBotManager(),
		sessionID:     sessionID,
		partyLine:     GetGlobalPartyLine(),
		ownerNick:     ownerNick,
	}
	return dt
}

// Start inicjuje tunel DCC
func (dt *DCCTunnel) Start(conn net.Conn) {
	dt.mu.Lock()
	if dt.active {
		util.Warning("DCC: DCC tunnel already active for bot %s", dt.bot.GetCurrentNick())
		dt.mu.Unlock()
		return
	}

	dt.conn = conn
	dt.active = true
	dt.readDone = make(chan struct{})
	dt.writeDone = make(chan struct{})
	dt.mu.Unlock()

	util.Debug("DCC: DCC tunnel started for bot %s", dt.bot.GetCurrentNick())

	welcomeMessage := dt.getWelcomeMessage()
	dt.conn.Write([]byte(welcomeMessage + "\r\n"))

	// Dołączamy do PartyLine
	dt.partyLine.AddSession(dt)

	go dt.readLoop()
}

func (dt *DCCTunnel) readLoop() {
	defer func() {
		dt.mu.Lock()
		dt.active = false
		if dt.readDone != nil {
			close(dt.readDone)
		}
		dt.mu.Unlock()
		dt.Stop()
	}()

	scanner := bufio.NewScanner(dt.conn)
	for scanner.Scan() {
		line := scanner.Text()
		util.Debug("DCC: Received from DCC connection: %s", line)
		dt.handleUserInput(line)
	}

	if err := scanner.Err(); err != nil {
		util.Error("DCC: Error reading from DCC Chat connection: %v", err)
	}
}

// Stop zatrzymuje tunel DCC
func (dt *DCCTunnel) Stop() {
	dt.mu.Lock()
	if !dt.active {
		dt.mu.Unlock()
		return
	}

	dt.active = false
	if dt.conn != nil {
		dt.conn.Close()
	}

	// Opuszczamy PartyLine
	dt.partyLine.RemoveSession(dt.sessionID)

	if dt.onStop != nil {
		dt.onStop()
	}
	dt.mu.Unlock()
}

// readFromConn obsługuje odczyt danych z połączenia
func (dt *DCCTunnel) readFromConn() {
	defer dt.Stop()

	scanner := bufio.NewScanner(dt.conn)
	for scanner.Scan() {
		line := scanner.Text()
		util.Debug("DCC: Received from DCC connection: %s", line)
		dt.handleUserInput(line)
	}

	if err := scanner.Err(); err != nil {
		util.Error("DCC: Error reading from DCC Chat connection: %v", err)
	}
}

// handleUserInput przetwarza dane wejściowe od użytkownika
func (dt *DCCTunnel) handleUserInput(input string) {
	if strings.HasPrefix(input, ".") {
		dt.processCommand(input)
	} else {
		timestamp := colorText(time.Now().Format("15:04:05"), 14)
		formattedMsg := fmt.Sprintf("[%s] %s%s%s %s",
			timestamp,
			colorText("<", 13),
			colorText(dt.ownerNick, 14),
			colorText(">", 13),
			input)
		dt.partyLine.broadcast(formattedMsg, dt.sessionID)
	}
}

func (dt *DCCTunnel) WriteToConn(data string) {
	dt.mu.Lock()
	defer dt.mu.Unlock()

	if !dt.active || dt.conn == nil {
		return
	}

	// Ignorowanie określonych zdarzeń
	if strings.Contains(data, " 303 ") {
		return
	}

	parsedMessage := dt.parseIRCMessage(data)
	if parsedMessage == "" {
		return
	}

	// Nieblokujące wysyłanie z timeoutem
	done := make(chan bool, 1)
	go func() {
		dt.conn.Write([]byte(parsedMessage + "\r\n"))
		done <- true
	}()

	select {
	case <-done:
		util.Debug("DCC: Message sent successfully")
	case <-time.After(time.Second * 5):
		util.Warning("DCC: Write timeout, stopping tunnel")
		dt.Stop()
	}
}

func (dt *DCCTunnel) parseIRCMessage(raw string) string {
	// Use your own irc package to parse the message
	event := irc.ParseIRCMessage(raw)
	if event == nil {
		util.Debug("DCC: Failed to parse IRC message")
		return ""
	}

	switch event.Command {
	case "PRIVMSG":
		return dt.formatter.formatPrivMsg(event)
	case "NOTICE":
		return dt.formatter.formatNotice(event)
	case "JOIN":
		return dt.formatter.formatJoin(event)
	case "PART":
		return dt.formatter.formatPart(event)
	case "QUIT":
		return dt.formatter.formatQuit(event)
	case "NICK":
		return dt.formatter.formatNick(event)
	case "MODE":
		return dt.formatter.formatMode(event)
	case "KICK":
		return dt.formatter.formatKick(event)
	default:
		return dt.formatter.formatOther(event)
	}
}

// shouldIgnoreEvent sprawdza czy dane zdarzenie powinno być ignorowane
func (dt *DCCTunnel) shouldIgnoreEvent(data string) bool {
	dt.mu.Lock()
	defer dt.mu.Unlock()

	// Ignoruj odpowiedzi ISON
	if strings.Contains(data, " 303 ") {
		return true
	}

	for event := range dt.ignoredEvents {
		if strings.Contains(data, " "+event+" ") {
			return true
		}
	}

	return false
}

// sendToClient wysyła wiadomość do klienta DCC
func (dt *DCCTunnel) sendToClient(message string) {
	if dt.conn != nil {
		dt.conn.Write([]byte(message + "\r\n"))
	}
}

// getWelcomeMessage zwraca wiadomość powitalną dla połączenia DCC
func (dt *DCCTunnel) getWelcomeMessage() string {
	welcomeMessage :=
		colorText("Welcome to the Bot Interface", 7) + "\n" +
			colorText("===========================\n", 11) + "\n" +
			colorText("    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[phantom Node bot]\n", 10) +
			colorText("                 ___      __             __      \n", 13) +
			colorText("    ____  ____  [ m ]__  / /_  __  __   / /____  ____ _____ ___\n", 13) +
			colorText("   / __ \\/ __ \\  / / _ \\/ __ \\/ / / /  / __/ _ \\/ __ `/ __ `__ \\\n", 13) +
			colorText("  / /_/ / /_/ / / /  __/ /_/ / /_/ /  / /_/  __/ /_/ / / / / / /\n", 13) +
			colorText(" / .___/\\____/_/ /\\___/_.___/\\__, /blo\\__/\\___/\\__,_/_/ /_/ /_/\n", 13) +
			colorText("/_/  ruciu  /___/   dominik /____/                     kofany\n\n", 13) +
			colorText("Type your IRC commands here using '.' as the prefix.\n", 12) +
			colorText("Type .help to see available commands.\n\n", 12)

	return welcomeMessage
}

// SetIgnoredEvent dodaje lub usuwa zdarzenie z listy ignorowanych
func (dt *DCCTunnel) SetIgnoredEvent(event string, ignore bool) {
	dt.mu.Lock()
	defer dt.mu.Unlock()
	if ignore {
		dt.ignoredEvents[event] = true
	} else {
		delete(dt.ignoredEvents, event)
	}
}

// IsActive zwraca status aktywności tunelu
func (dt *DCCTunnel) IsActive() bool {
	dt.mu.Lock()
	defer dt.mu.Unlock()
	return dt.active
}

// GetBot zwraca referencję do bota
func (dt *DCCTunnel) GetBot() types.Bot {
	return dt.bot
}

// updateFormatter aktualizuje formatter wiadomości (np. po zmianie nicka)
func (dt *DCCTunnel) updateFormatter(newNick string) {
	dt.mu.Lock()
	defer dt.mu.Unlock()
	dt.formatter = NewMessageFormatter(newNick)
}

// Funkcje pomocnicze do debugowania i logowania

// logDebug loguje wiadomość debugowania
func (dt *DCCTunnel) logDebug(format string, args ...interface{}) {
	botNick := dt.bot.GetCurrentNick()
	message := fmt.Sprintf(format, args...)
	util.Debug("DCC[%s]: %s", botNick, message)
}

// logError loguje błąd
func (dt *DCCTunnel) logError(format string, args ...interface{}) {
	botNick := dt.bot.GetCurrentNick()
	message := fmt.Sprintf(format, args...)
	util.Error("DCC[%s]: %s", botNick, message)
}

// logWarning loguje ostrzeżenie
func (dt *DCCTunnel) logWarning(format string, args ...interface{}) {
	botNick := dt.bot.GetCurrentNick()
	message := fmt.Sprintf(format, args...)
	util.Warning("DCC[%s]: %s", botNick, message)
}

// handleConnectionError obsługuje błędy połączenia
func (dt *DCCTunnel) handleConnectionError(err error) {
	if err != nil && err != io.EOF {
		dt.logError("Connection error: %v", err)
	}
	dt.Stop()
}

// isValidCommand sprawdza czy komenda jest poprawna
func (dt *DCCTunnel) isValidCommand(command string) bool {
	if !strings.HasPrefix(command, ".") {
		return false
	}

	cmd := strings.Fields(command)
	if len(cmd) == 0 {
		return false
	}

	// Usuń prefiks "." i przekonwertuj na wielkie litery
	cmdName := strings.ToUpper(strings.TrimPrefix(cmd[0], "."))

	// Lista dozwolonych komend
	validCommands := map[string]bool{
		"MSG": true, "JOIN": true, "PART": true,
		"MODE": true, "KICK": true, "QUIT": true,
		"NICK": true, "RAW": true, "HELP": true,
		"MJOIN": true, "MPART": true, "MRECONNECT": true,
		"ADDNICK": true, "DELNICK": true, "LISTNICKS": true,
		"ADDOWNER": true, "DELOWNER": true, "LISTOWNERS": true,
		"INFO": true,
	}

	return validCommands[cmdName]
}

// validateInput sprawdza i czyści dane wejściowe
func (dt *DCCTunnel) validateInput(input string) string {
	// Usuń znaki nowej linii i powrotu karetki
	input = strings.TrimSpace(input)
	input = strings.ReplaceAll(input, "\r", "")
	input = strings.ReplaceAll(input, "\n", "")

	// Ogranicz długość wejścia
	maxLength := 512 // Standardowe ograniczenie IRC
	if len(input) > maxLength {
		input = input[:maxLength]
	}

	return input
}

// PARTYLINE

func GetGlobalPartyLine() *PartyLine {
	partyLineOnce.Do(func() {
		globalPartyLine = &PartyLine{
			sessions:   make(map[string]*DCCTunnel),
			maxLogSize: 100, // Przechowujemy ostatnie 100 wiadomości
			messageLog: make([]PartyLineMessage, 0, 100),
		}
	})
	return globalPartyLine
}

// Metody PartyLine
func (pl *PartyLine) AddSession(tunnel *DCCTunnel) {
	pl.mutex.Lock()
	defer pl.mutex.Unlock()

	pl.sessions[tunnel.sessionID] = tunnel

	for _, msg := range pl.messageLog {
		formattedMsg := fmt.Sprintf("[%s] %s: %s",
			msg.Timestamp.Format("15:04:05"),
			msg.Sender,
			msg.Message)
		tunnel.sendToClient(formattedMsg)
	}

	pl.broadcast(fmt.Sprintf("*** %s joined the party line ***", tunnel.ownerNick), "")
}

func (pl *PartyLine) RemoveSession(sessionID string) {
	pl.mutex.Lock()
	defer pl.mutex.Unlock()

	if tunnel, exists := pl.sessions[sessionID]; exists {
		pl.broadcast(fmt.Sprintf("*** %s left the party line ***", tunnel.ownerNick), sessionID)
		delete(pl.sessions, sessionID)
	}
}

func (pl *PartyLine) broadcast(message string, excludeSessionID string) {
	for id, tunnel := range pl.sessions {
		if id != excludeSessionID {
			tunnel.sendToClient(message)
		}
	}

	// Dodajemy do historii tylko wiadomości od użytkowników (nie systemowe)
	if !strings.HasPrefix(message, "***") {
		pl.addToMessageLog(PartyLineMessage{
			Timestamp: time.Now(),
			Sender:    pl.sessions[excludeSessionID].bot.GetCurrentNick(),
			Message:   message,
		})
	}
}

func (pl *PartyLine) addToMessageLog(msg PartyLineMessage) {
	if len(pl.messageLog) >= pl.maxLogSize {
		pl.messageLog = pl.messageLog[1:]
	}
	pl.messageLog = append(pl.messageLog, msg)
}

// W dcc_tunnel.go
func (dt *DCCTunnel) HandleDisconnect() {
	dt.sendToClient("Connection closed by remote host")
	dt.Stop()
}

# Koniec /Users/kfn/gNb/internal/dcc/dcc_tunnel.go

# Plik /Users/kfn/gNb/internal/irc/client.go
package irc

import (
	"fmt"
	"strings"

	"github.com/kofany/gNb/internal/util"
	irc "github.com/kofany/go-ircevo"
)

// Client is an abstraction of an IRC connection
type Client struct {
	Connection  *irc.Connection
	Server      string
	Port        int
	Nick        string
	Username    string
	Realname    string
	Vhost       string
	SSL         bool
	IsConnected bool
}

// NewClient creates a new IRC client instance
func NewClient(server string, port int, nick, username, realname, vhost string, ssl bool) *Client {
	return &Client{
		Server:   server,
		Port:     port,
		Nick:     nick,
		Username: username,
		Realname: realname,
		Vhost:    vhost,
		SSL:      ssl,
	}
}

// Connect establishes a connection to the IRC server
func (c *Client) Connect() error {
	c.Connection = irc.IRC(c.Nick, c.Username)
	c.Connection.SetLocalIP(c.Vhost)
	c.Connection.VerboseCallbackHandler = false
	c.Connection.Debug = false
	c.Connection.UseTLS = c.SSL
	c.Connection.RealName = c.Realname

	err := c.Connection.Connect(fmt.Sprintf("%s:%d", c.Server, c.Port))
	if err != nil {
		return fmt.Errorf("failed to connect to %s:%d - %v", c.Server, c.Port, err)
	}

	c.IsConnected = true

	// Callback upon successful connection
	c.Connection.AddCallback("001", func(e *irc.Event) {
		util.Info("Connected to %s as %s", c.Server, c.Nick)
	})

	// Handle PING/PONG
	c.Connection.AddCallback("PING", func(e *irc.Event) {
		c.Connection.SendRawf("PONG :%s", e.Message())
	})

	// Start the event handling loop
	go c.Connection.Loop()
	return nil
}

// Disconnect disconnects the client from the IRC server
func (c *Client) Disconnect() {
	if c.IsConnected {
		c.Connection.Quit()
		c.IsConnected = false
	}
}

// Join joins the specified channel
func (c *Client) Join(channel string) {
	if c.IsConnected {
		c.Connection.Join(channel)
	}
}

// Part leaves the specified channel
func (c *Client) Part(channel string) {
	if c.IsConnected {
		c.Connection.Part(channel)
	}
}

// SendMessage sends a message to the specified target
func (c *Client) SendMessage(target, message string) {
	if c.IsConnected {
		c.Connection.Privmsg(target, message)
	}
}

// SendNotice sends a notice to the specified target
func (c *Client) SendNotice(target, message string) {
	if c.IsConnected {
		c.Connection.Notice(target, message)
	}
}

// ChangeNick changes the client's nick
func (c *Client) ChangeNick(newNick string) {
	if c.IsConnected {
		c.Connection.Nick(newNick)
		c.Nick = newNick
	}
}

// AddCallback adds a callback for the specified IRC event
func (c *Client) AddCallback(event string, callback func(*irc.Event)) {
	c.Connection.AddCallback(event, callback)
}

// SendRaw sends a raw IRC message
func (c *Client) SendRaw(message string) {
	if c.IsConnected {
		c.Connection.SendRaw(message)
	}
}

// SendISON sends an ISON command with a list of nicknames
func (c *Client) SendISON(nicks []string) {
	if c.IsConnected {
		c.Connection.SendRawf("ISON %s", strings.Join(nicks, " "))
	}
}

# Koniec /Users/kfn/gNb/internal/irc/client.go

# Plik /Users/kfn/gNb/internal/irc/parser.go
package irc

import (
	"regexp"
	"strings"
)

// Event represents a parsed IRC message
type Event struct {
	Raw     string
	Source  string
	Nick    string
	User    string
	Host    string
	Command string
	Args    []string
	Message string
}

// ParseIRCMessage parses a raw IRC message into an Event structure
func ParseIRCMessage(raw string) *Event {
	e := &Event{
		Raw: raw,
	}

	// Parse prefix
	if strings.HasPrefix(raw, ":") {
		parts := strings.SplitN(raw[1:], " ", 2)
		e.Source = parts[0]
		raw = parts[1]

		// Parse nick!user@host
		re := regexp.MustCompile(`^(?P<Nick>[^!]+)!?(?P<User>[^@]*)@?(?P<Host>.*)$`)
		match := re.FindStringSubmatch(e.Source)
		if match != nil {
			e.Nick = match[1]
			e.User = match[2]
			e.Host = match[3]
		} else {
			e.Nick = e.Source
		}
	}

	// Parse command and arguments
	if idx := strings.Index(raw, " :"); idx != -1 {
		e.Args = strings.Fields(raw[:idx])
		e.Message = raw[idx+2:]
	} else {
		e.Args = strings.Fields(raw)
	}

	if len(e.Args) > 0 {
		e.Command = strings.ToUpper(e.Args[0])
		e.Args = e.Args[1:]
	}

	return e
}

# Koniec /Users/kfn/gNb/internal/irc/parser.go

# Plik /Users/kfn/gNb/internal/nickmanager/nickmanager.go
package nickmanager

import (
	"encoding/json"
	"fmt"
	"os"
	"strings"
	"sync"
	"time"

	"github.com/kofany/gNb/internal/types"
	"github.com/kofany/gNb/internal/util"
)

type NickManager struct {
	nicksToCatch         []string
	priorityNicks        []string
	secondaryNicks       []string
	bots                 []types.Bot
	botIndex             int
	isonInterval         time.Duration
	tempUnavailableNicks map[string]time.Time // Mapa do blokowania nicków
	NoLettersServers     map[string]bool      // Mapa serwerów, które nie akceptują jednoliterowych nicków
	mutex                sync.Mutex
	// dodaj pole do przechowywania odwołania do BotManager

}

type NicksData struct {
	Nicks []string `json:"nicks"`
}

func NewNickManager() *NickManager {
	return &NickManager{
		tempUnavailableNicks: make(map[string]time.Time),
		NoLettersServers:     make(map[string]bool),
	}
}

func (nm *NickManager) LoadNicks(filename string) error {
	nm.mutex.Lock()
	defer nm.mutex.Unlock()

	data, err := os.ReadFile(filename)
	if err != nil {
		return err
	}

	var nicksData NicksData
	if err := json.Unmarshal(data, &nicksData); err != nil {
		return err
	}

	nm.priorityNicks = nicksData.Nicks

	// Add single-letter nicks to secondary nicks
	letters := "abcdefghijklmnopqrstuvwxyz"
	for _, c := range letters {
		nick := string(c)
		nm.secondaryNicks = append(nm.secondaryNicks, nick)
	}

	// Combine both lists into nicksToCatch
	nm.nicksToCatch = append(nm.priorityNicks, nm.secondaryNicks...)

	return nil
}

func (nm *NickManager) Start() {
	go nm.monitorNicks()
}

func (nm *NickManager) monitorNicks() {
	for {
		nm.mutex.Lock()
		if len(nm.bots) == 0 {
			nm.mutex.Unlock()
			time.Sleep(1 * time.Second)
			continue
		}

		// Get the next bot in the queue to send ISON
		bot := nm.bots[nm.botIndex]
		nm.botIndex = (nm.botIndex + 1) % len(nm.bots)
		nm.mutex.Unlock()

		if bot.IsConnected() {
			// Request ISON and wait for response
			onlineNicks, err := bot.RequestISON(nm.nicksToCatch)
			if err != nil {
				util.Error("Error requesting ISON from bot %s: %v", bot.GetCurrentNick(), err)
				time.Sleep(1 * time.Second)
				continue
			}
			nm.handleISONResponse(onlineNicks)
		} else {
			util.Debug("Bot %s is not connected; skipping", bot.GetCurrentNick())
		}

		// Wait before sending the next ISON
		time.Sleep(1 * time.Second)
	}
}

func (nm *NickManager) handleISONResponse(onlineNicks []string) {
	nm.mutex.Lock()
	defer nm.mutex.Unlock()

	util.Debug("NickManager received ISON response: %v", onlineNicks)

	currentTime := time.Now()
	nm.cleanupTempUnavailableNicks(currentTime)

	availablePriorityNicks := nm.filterAvailableNicks(nm.priorityNicks, onlineNicks)
	availableSecondaryNicks := nm.filterAvailableNicks(nm.secondaryNicks, onlineNicks)

	// Get list of available bots
	availableBots := nm.getAvailableBots()
	if len(availableBots) == 0 {
		util.Debug("No available bots to assign nicks")
		return
	}

	assignedBots := 0

	// Assign priority nicks first
	for assignedBots < len(availableBots) && len(availablePriorityNicks) > 0 {
		nick := availablePriorityNicks[0]
		availablePriorityNicks = availablePriorityNicks[1:]
		bot := availableBots[assignedBots]

		// Skip single-letter nicks for servers that don't accept them
		if len(nick) == 1 && nm.NoLettersServers[bot.GetServerName()] {
			util.Debug("Skipping single-letter nick %s for server %s", nick, bot.GetServerName())
			continue
		}

		assignedBots++
		util.Debug("Assigning priority nick %s to bot %s on server %s", nick, bot.GetCurrentNick(), bot.GetServerName())
		go bot.AttemptNickChange(nick)
	}

	// Then assign secondary nicks
	for assignedBots < len(availableBots) && len(availableSecondaryNicks) > 0 {
		nick := availableSecondaryNicks[0]
		availableSecondaryNicks = availableSecondaryNicks[1:]
		bot := availableBots[assignedBots]

		// Skip single-letter nicks for servers that don't accept them
		if len(nick) == 1 && nm.NoLettersServers[bot.GetServerName()] {
			util.Debug("Skipping single-letter nick %s for server %s", nick, bot.GetServerName())
			continue
		}

		assignedBots++
		util.Debug("Assigning secondary nick %s to bot %s on server %s", nick, bot.GetCurrentNick(), bot.GetServerName())
		go bot.AttemptNickChange(nick)
	}
}

func (nm *NickManager) RegisterBot(bot types.Bot) {
	nm.mutex.Lock()
	defer nm.mutex.Unlock()
	nm.bots = append(nm.bots, bot)
}

func (nm *NickManager) SetBots(bots []types.Bot) {
	nm.mutex.Lock()
	defer nm.mutex.Unlock()
	nm.bots = bots
}

func (nm *NickManager) getAvailableBots() []types.Bot {
	var availableBots []types.Bot
	for _, bot := range nm.bots {
		if bot.IsConnected() && !util.IsTargetNick(bot.GetCurrentNick(), nm.nicksToCatch) {
			availableBots = append(availableBots, bot)
		}
	}
	return availableBots
}

func (nm *NickManager) ReturnNickToPool(nick string) {
	nm.mutex.Lock()
	defer nm.mutex.Unlock()

	// Sprawdź, czy nick jest w pliku nicks.json lub jest pojedynczą literą
	if util.IsTargetNick(nick, nm.priorityNicks) || (len(nick) == 1 && nick >= "a" && nick <= "z") {
		delete(nm.tempUnavailableNicks, strings.ToLower(nick))

		// Natychmiast spróbuj przydzielić ten nick innemu botowi
		availableBots := nm.getAvailableBots()
		if len(availableBots) > 0 {
			go availableBots[0].AttemptNickChange(nick)
		}
	}
}

func (nm *NickManager) GetNicksToCatch() []string {
	nm.mutex.Lock()
	defer nm.mutex.Unlock()
	nicksCopy := make([]string, len(nm.nicksToCatch))
	copy(nicksCopy, nm.nicksToCatch)
	return nicksCopy
}

func (nm *NickManager) AddNick(nick string) error {
	nm.mutex.Lock()
	defer nm.mutex.Unlock()

	// Sprawdź, czy nick już istnieje
	for _, n := range nm.priorityNicks {
		if n == nick {
			return fmt.Errorf("nick '%s' already exists", nick)
		}
	}

	// Dodaj nick do listy priorytetowej
	nm.priorityNicks = append(nm.priorityNicks, nick)
	nm.nicksToCatch = append(nm.nicksToCatch, nick)

	// Zapisz do pliku
	return nm.saveNicksToFile()
}

func (nm *NickManager) RemoveNick(nick string) error {
	nm.mutex.Lock()
	defer nm.mutex.Unlock()

	// Usuń nick z listy priorytetowej
	index := -1
	for i, n := range nm.priorityNicks {
		if n == nick {
			index = i
			break
		}
	}

	if index == -1 {
		return fmt.Errorf("nick '%s' not found", nick)
	}

	nm.priorityNicks = append(nm.priorityNicks[:index], nm.priorityNicks[index+1:]...)

	// Usuń nick z listy nicksToCatch
	index = -1
	for i, n := range nm.nicksToCatch {
		if n == nick {
			index = i
			break
		}
	}

	if index != -1 {
		nm.nicksToCatch = append(nm.nicksToCatch[:index], nm.nicksToCatch[index+1:]...)
	}

	// Zapisz do pliku
	return nm.saveNicksToFile()
}

func (nm *NickManager) GetNicks() []string {
	nm.mutex.Lock()
	defer nm.mutex.Unlock()

	nicksCopy := make([]string, len(nm.priorityNicks))
	copy(nicksCopy, nm.priorityNicks)
	return nicksCopy
}

func (nm *NickManager) saveNicksToFile() error {
	data := NicksData{
		Nicks: nm.priorityNicks,
	}

	jsonData, err := json.MarshalIndent(data, "", "  ")
	if err != nil {
		return err
	}

	return os.WriteFile("data/nicks.json", jsonData, 0644)
}

func (nm *NickManager) cleanupTempUnavailableNicks(currentTime time.Time) {
	for nick, unblockTime := range nm.tempUnavailableNicks {
		if currentTime.After(unblockTime) {
			delete(nm.tempUnavailableNicks, nick)
		}
	}
}

func (nm *NickManager) filterAvailableNicks(nicks []string, onlineNicks []string) []string {
	var available []string
	for _, nick := range nicks {
		lowerNick := strings.ToLower(nick)
		if !util.ContainsIgnoreCase(onlineNicks, nick) {
			// Sprawdź, czy nick nie jest tymczasowo niedostępny
			if _, exists := nm.tempUnavailableNicks[lowerNick]; !exists {
				available = append(available, nick)
			}
		}
	}
	return available
}

func (nm *NickManager) MarkNickAsTemporarilyUnavailable(nick string) {
	nm.mutex.Lock()
	defer nm.mutex.Unlock()

	nm.tempUnavailableNicks[strings.ToLower(nick)] = time.Now().Add(1 * time.Minute)
}

func (nm *NickManager) NotifyNickChange(oldNick, newNick string) {
	nm.mutex.Lock()
	defer nm.mutex.Unlock()

	if util.IsTargetNick(oldNick, nm.nicksToCatch) {
		// Oznacz stary nick jako dostępny
		delete(nm.tempUnavailableNicks, strings.ToLower(oldNick))

		// Natychmiast spróbuj przydzielić ten nick innemu botowi
		availableBots := nm.getAvailableBots()
		if len(availableBots) > 0 {
			go availableBots[0].AttemptNickChange(oldNick)
		}
	}

	// Nie oznaczamy nowego nicka jako tymczasowo niedostępnego,
	// ponieważ jest to losowy nick, a nie z puli do łapania
}

func (nm *NickManager) MarkServerNoLetters(serverName string) {
	nm.mutex.Lock()
	defer nm.mutex.Unlock()
	nm.NoLettersServers[serverName] = true
}

# Koniec /Users/kfn/gNb/internal/nickmanager/nickmanager.go

# Plik /Users/kfn/gNb/internal/types/interfaces.go
package types

import (
	"time"

	"github.com/kofany/gNb/internal/auth"
	irc "github.com/kofany/go-ircevo"
)

type Bot interface {
	AttemptNickChange(nick string)
	GetCurrentNick() string
	IsConnected() bool
	SetOwnerList(owners auth.OwnerList)
	SetChannels(channels []string)
	RequestISON(nicks []string) ([]string, error)
	Connect() error
	Quit(message string)
	Reconnect()
	SendMessage(target, message string)
	JoinChannel(channel string)
	PartChannel(channel string)
	ChangeNick(newNick string)
	HandleCommands(e *irc.Event)
	SetBotManager(manager BotManager)
	GetBotManager() BotManager
	SetNickManager(manager NickManager)
	GetNickManager() NickManager
	GetServerName() string
	StartBNC() (int, string, error)
	StopBNC()
	SendRaw(message string)
}

type NickManager interface {
	RegisterBot(bot Bot)
	ReturnNickToPool(nick string)
	SetBots(bots []Bot)
	GetNicksToCatch() []string
	AddNick(nick string) error
	RemoveNick(nick string) error
	GetNicks() []string
	MarkNickAsTemporarilyUnavailable(nick string)
	NotifyNickChange(oldNick, newNick string)
	MarkServerNoLetters(serverName string)
	Start()
}

type BotManager interface {
	StartBots()
	Stop()
	CanExecuteMassCommand(cmdName string) bool
	AddOwner(ownerMask string) error
	RemoveOwner(ownerMask string) error
	GetOwners() []string
	GetBots() []Bot
	GetNickManager() NickManager
	GetTotalCreatedBots() int
	SetMassCommandCooldown(duration time.Duration)
	GetMassCommandCooldown() time.Duration
	CollectReactions(channel, message string, action func() error)
	SendSingleMsg(channel, message string)
}

type ReactionRequest struct {
	Channel   string
	Message   string
	Timestamp time.Time
	Action    func() error
}

# Koniec /Users/kfn/gNb/internal/types/interfaces.go

# Plik /Users/kfn/gNb/internal/util/helpers.go
package util

import "strings"

// Contains checks if a slice contains a specific string
func Contains(slice []string, item string) bool {
	itemLower := strings.ToLower(item)
	for _, s := range slice {
		if strings.ToLower(s) == itemLower {
			return true
		}
	}
	return false
}

// IsTargetNick checks if a nick is a target nick to catch
func IsTargetNick(nick string, targetNicks []string) bool {
	nick = strings.ToLower(nick)
	for _, target := range targetNicks {
		if strings.ToLower(target) == nick {
			return true
		}
	}
	return false
}

func ContainsIgnoreCase(slice []string, item string) bool {
	itemLower := strings.ToLower(item)
	for _, s := range slice {
		if strings.ToLower(s) == itemLower {
			return true
		}
	}
	return false
}

# Koniec /Users/kfn/gNb/internal/util/helpers.go

# Plik /Users/kfn/gNb/internal/util/iputil.go
package util

import (
	"bytes"
	"fmt"
	"net"
	"strings"
)

// IsValidIP checks if the given string is a valid IP address
func IsValidIP(ip string) bool {
	return net.ParseIP(ip) != nil
}

// IsIPv4 checks if the given string is a valid IPv4 address
func IsIPv4(ip string) bool {
	parsedIP := net.ParseIP(ip)
	return parsedIP != nil && parsedIP.To4() != nil
}

// IsIPv6 checks if the given string is a valid IPv6 address
func IsIPv6(ip string) bool {
	parsedIP := net.ParseIP(ip)
	return parsedIP != nil && parsedIP.To4() == nil
}

// ParseCIDR parses CIDR notation and returns IP and subnet mask
func ParseCIDR(cidr string) (net.IP, *net.IPNet, error) {
	return net.ParseCIDR(cidr)
}

// IsIPInRange checks if an IP address is within a CIDR range
func IsIPInRange(ip string, cidr string) (bool, error) {
	parsedIP := net.ParseIP(ip)
	if parsedIP == nil {
		return false, fmt.Errorf("invalid IP address: %s", ip)
	}

	_, ipNet, err := net.ParseCIDR(cidr)
	if err != nil {
		return false, fmt.Errorf("invalid CIDR: %s", cidr)
	}

	return ipNet.Contains(parsedIP), nil
}

// ExpandIPv6 expands a shortened IPv6 address to its full form
func ExpandIPv6(ip string) string {
	parsedIP := net.ParseIP(ip)
	if parsedIP == nil || parsedIP.To4() != nil {
		return ip // Return original if not a valid IPv6
	}
	return strings.ToUpper(fmt.Sprintf("%032x", []byte(parsedIP.To16())))
}

// CompareIPs compares two IP addresses
func CompareIPs(ip1, ip2 string) (int, error) {
	parsedIP1 := net.ParseIP(ip1)
	parsedIP2 := net.ParseIP(ip2)

	if parsedIP1 == nil {
		return 0, fmt.Errorf("invalid IP address: %s", ip1)
	}
	if parsedIP2 == nil {
		return 0, fmt.Errorf("invalid IP address: %s", ip2)
	}

	return bytes.Compare(parsedIP1, parsedIP2), nil
}

// IsPrivateIP checks if the IP address is private
func IsPrivateIP(ip string) bool {
	parsedIP := net.ParseIP(ip)
	if parsedIP == nil {
		return false
	}

	privateIPBlocks := []string{
		"10.0.0.0/8",
		"172.16.0.0/12",
		"192.168.0.0/16",
		"fc00::/7",
	}

	for _, block := range privateIPBlocks {
		_, ipNet, err := net.ParseCIDR(block)
		if err != nil {
			continue
		}
		if ipNet.Contains(parsedIP) {
			return true
		}
	}
	return false
}

# Koniec /Users/kfn/gNb/internal/util/iputil.go

# Plik /Users/kfn/gNb/internal/util/logger.go
package util

import (
	"fmt"
	"log"
	"os"
	"strings"
	"sync"
)

type LogLevel int

const (
	DEBUG LogLevel = iota
	INFO
	WARNING
	ERROR
)

var (
	logger      *log.Logger
	logLevel    LogLevel
	logMutex    sync.Mutex
	logFile     *os.File
	initialized bool
)

// InitLogger initializes the logger with the specified level and filename.
func InitLogger(level LogLevel, filename string) error {
	logMutex.Lock()
	defer logMutex.Unlock()

	if initialized {
		return fmt.Errorf("logger is already initialized")
	}

	logLevel = level

	file, err := os.OpenFile(filename, os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0644)
	if err != nil {
		return err
	}

	logger = log.New(file, "", log.LstdFlags)
	logFile = file
	initialized = true
	return nil
}

// CloseLogger closes the log file.
func CloseLogger() {
	logMutex.Lock()
	defer logMutex.Unlock()

	if initialized {
		logFile.Close()
		initialized = false
	}
}

// logMessage logs a message at the specified level.
func logMessage(level LogLevel, format string, args ...interface{}) {
	logMutex.Lock()
	defer logMutex.Unlock()

	if !initialized || level < logLevel {
		return
	}

	msg := fmt.Sprintf(format, args...)
	prefix := ""
	switch level {
	case DEBUG:
		prefix = "DEBUG: "
	case INFO:
		prefix = "INFO: "
	case WARNING:
		prefix = "WARNING: "
	case ERROR:
		prefix = "ERROR: "
	}
	logger.SetPrefix(prefix)
	logger.Println(msg)

	// Also print to console
	fmt.Println(prefix + msg)
}

// Debug logs a message at DEBUG level.
func Debug(format string, args ...interface{}) {
	logMessage(DEBUG, format, args...)
}

// Info logs a message at INFO level.
func Info(format string, args ...interface{}) {
	logMessage(INFO, format, args...)
}

// Warning logs a message at WARNING level.
func Warning(format string, args ...interface{}) {
	logMessage(WARNING, format, args...)
}

// Error logs a message at ERROR level.
func Error(format string, args ...interface{}) {
	logMessage(ERROR, format, args...)
}

// ParseLogLevel parses the log level from a string.
func ParseLogLevel(levelStr string) (LogLevel, error) {
	switch strings.ToLower(levelStr) {
	case "debug":
		return DEBUG, nil
	case "info":
		return INFO, nil
	case "warning":
		return WARNING, nil
	case "error":
		return ERROR, nil
	default:
		return INFO, fmt.Errorf("unknown log level: %s", levelStr)
	}
}

# Koniec /Users/kfn/gNb/internal/util/logger.go

# Plik /Users/kfn/gNb/internal/util/matcher.go
package util

import (
	"regexp"
	"strings"
)

// Matcher is responsible for comparing IRC userhosts with masks.
type Matcher struct{}

// MatchUserHost checks if the full userhost matches the mask.
func (m *Matcher) MatchUserHost(mask, userHost string) bool {
	// Split mask and userHost into parts
	maskParts := strings.SplitN(mask, "!", 2)
	hostParts := strings.SplitN(userHost, "!", 2)
	if len(maskParts) != 2 || len(hostParts) != 2 {
		return false // Invalid format
	}

	maskIdentHost := strings.SplitN(maskParts[1], "@", 2)
	hostIdentHost := strings.SplitN(hostParts[1], "@", 2)
	if len(maskIdentHost) != 2 || len(hostIdentHost) != 2 {
		return false // Invalid format
	}

	maskIdent, maskHost := maskIdentHost[0], maskIdentHost[1]
	hostIdent, hostHost := hostIdentHost[0], hostIdentHost[1]

	// Check ident
	if !m.matchWildcard(maskIdent, hostIdent) {
		return false
	}

	// Check host/IP
	return m.MatchHost(maskHost, hostHost)
}

// MatchHost checks if the host matches the mask, including wildcards and IPv6 expansion.
func (m *Matcher) MatchHost(mask, host string) bool {
	// Special handling for IPv6
	if strings.Contains(host, ":") {
		host = ExpandIPv6(host)
	}

	return m.matchWildcard(mask, host)
}

// matchWildcard converts wildcard patterns to regex and matches the string.
func (m *Matcher) matchWildcard(pattern, str string) bool {
	// Escape regex special characters
	pattern = regexp.QuoteMeta(pattern)
	// Replace wildcards with regex equivalents
	pattern = strings.Replace(pattern, `\*`, ".*", -1)    // * matches any string
	pattern = strings.Replace(pattern, `\?`, ".", -1)     // ? matches any character
	pattern = strings.Replace(pattern, `\#`, "[0-9]", -1) // # matches any digit
	// Add start and end anchors
	pattern = "^" + pattern + "$"

	matched, _ := regexp.MatchString(pattern, str)
	return matched
}

# Koniec /Users/kfn/gNb/internal/util/matcher.go

# Plik /Users/kfn/gNb/internal/util/nickgen.go
package util

import (
	"crypto/tls"
	"encoding/json"
	"fmt"
	"io"
	"math/rand"
	"net/http"
	"strings"
	"time"
)

type APIResponse struct {
	Words []string `json:"words"`
}

func GetWordsFromAPI(apiURL string, maxWordLength, timeout, count int) ([]string, error) {
	client := &http.Client{
		Timeout: time.Duration(timeout) * time.Second,
		Transport: &http.Transport{
			TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
		},
	}

	url := fmt.Sprintf("%s?count=%d&length=%d", apiURL, count, maxWordLength)
	resp, err := client.Get(url)
	if err != nil {
		return generateFallbackWords(count), nil
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return generateFallbackWords(count), nil
	}

	var response APIResponse
	err = json.Unmarshal(body, &response)
	if err != nil || len(response.Words) < count {
		return generateFallbackWords(count), nil
	}

	return response.Words[:count], nil
}

func GenerateRandomNick(apiURL string, maxWordLength int, timeoutSeconds int) (string, error) {
	client := &http.Client{
		Timeout: time.Duration(timeoutSeconds) * time.Second,
		Transport: &http.Transport{
			TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
		},
	}

	fullURL := fmt.Sprintf("%s?upto=%d&count=100", apiURL, maxWordLength)
	resp, err := client.Get(fullURL)
	if err != nil {
		return GenerateFallbackNick(), nil
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return GenerateFallbackNick(), nil
	}

	var apiResp APIResponse
	err = json.Unmarshal(body, &apiResp)
	if err != nil || len(apiResp.Words) == 0 {
		return GenerateFallbackNick(), nil
	}

	validWords := []string{}
	for _, word := range apiResp.Words {
		word = strings.TrimSpace(word)
		if len(word) >= 3 && len(word) <= maxWordLength && isAlpha(word) {
			validWords = append(validWords, capitalize(word))
		}
	}

	if len(validWords) == 0 {
		return GenerateFallbackNick(), nil
	}

	return validWords[rand.Intn(len(validWords))], nil
}

func generateFallbackWords(count int) []string {
	words := make([]string, count)
	for i := 0; i < count; i++ {
		words[i] = GenerateFallbackNick()
	}
	return words
}

func GenerateFallbackNick() string {
	const charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
	nick := make([]byte, 8)
	for i := range nick {
		nick[i] = charset[rand.Intn(len(charset))]
	}
	return string(nick)
}

func isAlpha(s string) bool {
	for _, r := range s {
		if !((r >= 'a' && r <= 'z') || (r >= 'A' && r <= 'Z')) {
			return false
		}
	}
	return true
}

func capitalize(s string) string {
	if len(s) == 0 {
		return s
	}
	return strings.ToUpper(string(s[0])) + strings.ToLower(s[1:])
}

# Koniec /Users/kfn/gNb/internal/util/nickgen.go

# Plik /Users/kfn/gNb/scripts/run.sh

# Koniec /Users/kfn/gNb/scripts/run.sh

