# Plik /Users/kfn/gognb/cmd/main.go
package main

import (
	"log"
	"os"
	"os/signal"
	"syscall"

	"github.com/kofany/gNb/internal/auth"
	"github.com/kofany/gNb/internal/bot"
	"github.com/kofany/gNb/internal/config"
	"github.com/kofany/gNb/internal/nickmanager"
	"github.com/kofany/gNb/internal/util"
)

func main() {
	// Load configuration from YAML file
	cfg, err := config.LoadConfig("configs/config.yaml")
	if err != nil {
		log.Fatalf("Failed to load configuration: %v", err)
	}

	// Parse log level from configuration
	level, err := util.ParseLogLevel(cfg.Global.LogLevel)
	if err != nil {
		log.Fatalf("Invalid log level in config: %v", err)
	}

	// Initialize logger
	err = util.InitLogger(level, "bot.log")
	if err != nil {
		log.Fatalf("Failed to initialize logger: %v", err)
	}
	defer util.CloseLogger()

	util.Info("Logger initialized with level: %s", cfg.Global.LogLevel)

	// Load owners from JSON file
	owners, err := auth.LoadOwners("configs/owners.json")
	if err != nil {
		util.Error("Failed to load owners: %v", err)
		return
	}

	util.Debug("Owners loaded: %+v", owners)

	// Create and initialize NickManager
	nm := nickmanager.NewNickManager()
	err = nm.LoadNicks("data/nicks.json")
	if err != nil {
		util.Error("Failed to load nicks: %v", err)
		return
	}

	util.Debug("NickManager initialized with nicks: %+v", nm.GetNicksToCatch())

	// Create BotManager
	botManager := bot.NewBotManager(cfg, owners, nm)

	// Start bots
	botManager.StartBots()

	// Start NickManager's monitoring loop
	nm.Start()

	util.Debug("Configuration loaded: %+v", cfg)

	// Handle system signals for clean shutdown
	sigs := make(chan os.Signal, 1)
	signal.Notify(sigs, syscall.SIGINT, syscall.SIGTERM)

	util.Info("Bot is running. Press Ctrl+C to exit.")

	// Wait for shutdown signal
	<-sigs

	// Stop bots and exit application
	botManager.Stop()
	util.Info("Application has been shut down.")
}

# Koniec /Users/kfn/gognb/cmd/main.go

# Plik /Users/kfn/gognb/configs/config.example.yaml
global:
  log_level: debug  # Logging level: debug, info, warning, error
  ison_interval: 1  # Interval in seconds between ISON requests
  nick_api:
    url: 'https://i.got.al/words.php'
    max_word_length: 12
    timeout: 5  # Timeout for API requests in seconds
  max_nick_length: 14
  owner_command_prefixes:
    - "!"
    - "."
    - "@"
  reconnect_retries: 3
  reconnect_interval: 2

bots:
  - server: mirc.irc.al
    port: 6667
    ssl: false
    vhost: 192.168.176.35 # example IPv4
  - server: mirc.irc.al
    port: 6667
    ssl: false
    vhost: 2a02:2454:ffff:0101:1c56:2b73:771e:f9dd # example IPv6 

channels:
  - "#irpg"

owner_command_prefixes:
  - "!"
  - "."
  - "@"
  
# Koniec /Users/kfn/gognb/configs/config.example.yaml

# Plik /Users/kfn/gognb/configs/config.yaml


global:
  log_level: debug  # Logging level: debug, info, warning, error
  ison_interval: 2  # Interval in seconds between ISON requests
  nick_api:
    url: 'https://i.got.al/words.php'
    max_word_length: 12
    timeout: 5  # Timeout for API requests in seconds
  max_nick_length: 14
  owner_command_prefixes:
    - "!"
    - "."
    - "@"
  reconnect_retries: 3
  reconnect_interval: 2

bots:
  - server: mirc.irc.al
    port: 6667
    ssl: false
    vhost: 192.168.176.35
  - server: mirc.irc.al
    port: 6667
    ssl: false
    vhost: 2a02:2454:8545:4900:1c56:2b73:771e:f9dd
  - server: mirc.irc.al
    port: 6667
    ssl: false
    vhost: 2a02:2454:8545:4900:1c56:2b73:771e:f9dd
  - server: mirc.irc.al
    port: 6667
    ssl: false
    vhost: 2a02:2454:8545:4900:1c56:2b73:771e:f9dd
  - server: mirc.irc.al
    port: 6667
    ssl: false
    vhost: 2a02:2454:8545:4900:1c56:2b73:771e:f9dd
  - server: mirc.irc.al
    port: 6667
    ssl: false
    vhost: 2a02:2454:8545:4900:1c56:2b73:771e:f9dd
  - server: mirc.irc.al
    port: 6667
    ssl: false
    vhost: 2a02:2454:8545:4900:1c56:2b73:771e:f9dd
  - server: mirc.irc.al
    port: 6667
    ssl: false
    vhost: 2a02:2454:8545:4900:1c56:2b73:771e:f9dd
  - server: mirc.irc.al
    port: 6667
    ssl: false
    vhost: 2a02:2454:8545:4900:1c56:2b73:771e:f9dd
  - server: mirc.irc.al
    port: 6667
    ssl: false
    vhost: 2a02:2454:8545:4900:1c56:2b73:771e:f9dd
  - server: mirc.irc.al
    port: 6667
    ssl: false
    vhost: 2a02:2454:8545:4900:1c56:2b73:771e:f9dd
  - server: mirc.irc.al
    port: 6667
    ssl: false
    vhost: 2a02:2454:8545:4900:1c56:2b73:771e:f9dd
  - server: mirc.irc.al
    port: 6667
    ssl: false
    vhost: 2a02:2454:8545:4900:1c56:2b73:771e:f9dd
  - server: mirc.irc.al
    port: 6667
    ssl: false
    vhost: 2a02:2454:8545:4900:1c56:2b73:771e:f9dd
  - server: mirc.irc.al
    port: 6667
    ssl: false
    vhost: 2a02:2454:8545:4900:1c56:2b73:771e:f9dd
  - server: mirc.irc.al
    port: 6667
    ssl: false
    vhost: 2a02:2454:8545:4900:1c56:2b73:771e:f9dd
  - server: mirc.irc.al
    port: 6667
    ssl: false
    vhost: 2a02:2454:8545:4900:1c56:2b73:771e:f9dd

channels:
  - "#irpg"

owner_command_prefixes:
  - "!"
  - "."
  - "@"


# Koniec /Users/kfn/gognb/configs/config.yaml

# Plik /Users/kfn/gognb/configs/owners.json
{
    "owners": [
      "*!kofany@irc.al"
    ]
  }
# Koniec /Users/kfn/gognb/configs/owners.json

# Plik /Users/kfn/gognb/data/nicks.json
{
  "nicks": [
    "CoolBot",
    "NickKeeper",
    "IRCGuardian",
    "NetWatcher",
    "test335"
  ]
}
# Koniec /Users/kfn/gognb/data/nicks.json

# Plik /Users/kfn/gognb/doall.sh
#!/bin/bash

# Ścieżka do katalogu głównego projektu
PROJECT_DIR="/Users/kfn/gognb"

# Plik, do którego będą zapisywane wszystkie zawartości
OUTPUT_FILE="$PROJECT_DIR/all.txt"

# Tworzenie pustego pliku wyjściowego lub wyczyszczenie istniejącego
> "$OUTPUT_FILE"

# Funkcja przetwarzająca pliki w katalogu
process_files() {
    local dir_path="$1"
    for file in "$dir_path"/*; do
        # Pomiń plik wyjściowy
        if [ "$file" == "$OUTPUT_FILE" ]; then
            continue
        fi

        # Pomiń pliki z rozszerzeniem .log
        if [[ "$file" == *.log ]]; then
            echo "Pomijanie pliku log: $file"
            continue
        fi

        if [ -f "$file" ]; then
            echo "# Plik $file" >> "$OUTPUT_FILE"
            cat "$file" >> "$OUTPUT_FILE"
            echo -e "\n# Koniec $file\n" >> "$OUTPUT_FILE"
        elif [ -d "$file" ]; then
            process_files "$file"
        fi
    done
}

# Przetwarzanie wszystkich plików w katalogu głównym projektu
process_files "$PROJECT_DIR"

echo "Zawartość wszystkich plików (bez plików .log) została zapisana do $OUTPUT_FILE"

# Koniec /Users/kfn/gognb/doall.sh

# Plik /Users/kfn/gognb/go.mod
module github.com/kofany/gNb

go 1.23.1

require (
	github.com/kofany/go-ircevent v0.1.1
	gopkg.in/yaml.v2 v2.4.0
)

require (
	golang.org/x/net v0.0.0-20210614182718-04defd469f4e // indirect
	golang.org/x/text v0.3.6 // indirect
)

# Koniec /Users/kfn/gognb/go.mod

# Plik /Users/kfn/gognb/go.sum
github.com/kofany/go-ircevent v0.1.1 h1:0bItjV2MaZPNs/lUzncuA+JvhnIh0yH1He/hNH9Q9p0=
github.com/kofany/go-ircevent v0.1.1/go.mod h1:jLTZ6WBLG226Axc2gmMqxooBdh2GXZBALYfUMZFahBA=
golang.org/x/net v0.0.0-20210614182718-04defd469f4e h1:XpT3nA5TvE525Ne3hInMh6+GETgn27Zfm9dxsThnX2Q=
golang.org/x/net v0.0.0-20210614182718-04defd469f4e/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=
golang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
golang.org/x/sys v0.0.0-20210423082822-04245dca01da/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=
golang.org/x/text v0.3.6 h1:aRYxNxv6iGQlyVaZmk6ZgYEDa+Jg18DxebPSrd6bg1M=
golang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405 h1:yhCVgyC4o1eVCa2tZl7eS0r+SDo693bJlVdllGtEeKM=
gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
gopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=
gopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=

# Koniec /Users/kfn/gognb/go.sum

# Plik /Users/kfn/gognb/internal/auth/owner.go
package auth

import (
	"encoding/json"
	"os"

	"github.com/kofany/gNb/internal/util"
	irc "github.com/kofany/go-ircevent"
)

// OwnerList contains the list of owners defined in the JSON file.
type OwnerList struct {
	Owners []string `json:"owners"`
}

// LoadOwners loads the list of owners from a JSON file.
func LoadOwners(filename string) (OwnerList, error) {
	var owners OwnerList
	data, err := os.ReadFile(filename)
	if err != nil {
		return owners, err
	}
	err = json.Unmarshal(data, &owners)
	return owners, err
}

// IsOwner checks if a user is an owner.
func IsOwner(event *irc.Event, owners OwnerList) bool {
	// Create an instance of Matcher
	matcher := util.Matcher{}
	userHost := event.Nick + "!" + event.User + "@" + event.Host

	// Check if userHost matches any owner masks
	for _, ownerMask := range owners.Owners {
		if matcher.MatchUserHost(ownerMask, userHost) {
			return true
		}
	}
	return false
}

func (ol *OwnerList) GetOwners() []string {
	return ol.Owners
}

# Koniec /Users/kfn/gognb/internal/auth/owner.go

# Plik /Users/kfn/gognb/internal/bot/bot.go
package bot

import (
	"fmt"
	"strings"
	"time"

	"github.com/kofany/gNb/internal/auth"
	"github.com/kofany/gNb/internal/config"
	"github.com/kofany/gNb/internal/types"
	"github.com/kofany/gNb/internal/util"
	irc "github.com/kofany/go-ircevent"
)

// Ensure Bot implements types.Bot
var _ types.Bot = (*Bot)(nil)

// Bot represents a single IRC bot
type Bot struct {
	Config          *config.BotConfig
	GlobalConfig    *config.GlobalConfig
	Connection      *irc.Connection
	CurrentNick     string
	Username        string
	Realname        string
	isConnected     bool
	owners          auth.OwnerList
	channels        []string
	nickManager     types.NickManager
	isReconnecting  bool
	lastConnectTime time.Time
	connected       chan struct{}
	botManager      types.BotManager
	gaveUp          bool
	isonResponse    chan []string
}

// NewBot creates a new Bot instance
func NewBot(cfg *config.BotConfig, globalConfig *config.GlobalConfig, nm types.NickManager, bm types.BotManager) *Bot {
	nick, err := util.GenerateRandomNick(globalConfig.NickAPI.URL, globalConfig.NickAPI.MaxWordLength, globalConfig.NickAPI.Timeout)
	if err != nil {
		nick = util.GenerateFallbackNick()
	}

	ident, err := util.GenerateRandomNick(globalConfig.NickAPI.URL, globalConfig.NickAPI.MaxWordLength, globalConfig.NickAPI.Timeout)
	if err != nil {
		ident = "botuser"
	}

	realname, err := util.GenerateRandomNick(globalConfig.NickAPI.URL, globalConfig.NickAPI.MaxWordLength, globalConfig.NickAPI.Timeout)
	if err != nil {
		realname = "Nick Catcher Bot"
	}

	bot := &Bot{
		Config:       cfg,
		GlobalConfig: globalConfig,
		CurrentNick:  nick,
		Username:     ident,
		Realname:     realname,
		isConnected:  false,
		nickManager:  nm,
		connected:    make(chan struct{}),
		botManager:   bm,
		isonResponse: make(chan []string, 1),
	}

	nm.RegisterBot(bot)
	return bot
}

// IsConnected returns the connection status of the bot
func (b *Bot) IsConnected() bool {
	return b.isConnected
}

// Connect establishes a connection to the IRC server with retry logic
func (b *Bot) Connect() error {
	return b.connectWithRetry()
}

// connectWithRetry attempts to connect to the server with a specified number of retries
func (b *Bot) connectWithRetry() error {
	maxRetries := b.GlobalConfig.ReconnectRetries
	retryInterval := time.Duration(b.GlobalConfig.ReconnectInterval) * time.Second

	for attempts := 0; attempts < maxRetries; attempts++ {
		b.Connection = irc.IRC(b.CurrentNick, b.Username, b.Config.Vhost)
		b.Connection.VerboseCallbackHandler = false
		b.Connection.Debug = false
		b.Connection.UseTLS = b.Config.SSL
		b.Connection.RealName = b.Realname

		// Initialize connected channel
		b.connected = make(chan struct{})

		// Add callbacks
		b.addCallbacks()

		util.Info("Bot %s is attempting to connect to %s", b.CurrentNick, b.Config.ServerAddress())
		err := b.Connection.Connect(b.Config.ServerAddress())
		if err != nil {
			util.Error("Attempt %d: Failed to connect bot %s: %v", attempts+1, b.CurrentNick, err)
			time.Sleep(retryInterval)
			continue
		}

		go b.Connection.Loop()

		// Wait for connection confirmation or timeout
		select {
		case <-b.connected:
			// Connection established
			util.Info("Bot %s successfully connected", b.CurrentNick)
			return nil
		case <-time.After(30 * time.Second):
			util.Warning("Bot %s did not receive connection confirmation within 30 seconds", b.CurrentNick)
			b.Connection.Quit()
		}
	}

	return fmt.Errorf("bot %s could not connect after %d attempts", b.CurrentNick, maxRetries)
}

// addCallbacks adds necessary callbacks to the IRC connection
func (b *Bot) addCallbacks() {
	// Callback for successful connection
	b.Connection.AddCallback("001", func(e *irc.Event) {
		b.isConnected = true
		b.gaveUp = false // Reset flag upon successful connection
		b.lastConnectTime = time.Now()
		util.Info("Bot %s connected to %s as %s", b.CurrentNick, b.Config.Server, b.CurrentNick)
		// Join channels
		for _, channel := range b.channels {
			b.JoinChannel(channel)
		}
		close(b.connected) // Signal that connection has been established
	})

	// Callback for nick changes
	b.Connection.AddCallback("NICK", func(e *irc.Event) {
		if e.Nick == b.CurrentNick {
			b.CurrentNick = e.Message()
			util.Info("Bot %s changed nick to %s", e.Nick, b.CurrentNick)
		}
	})

	// Callback for ISON response
	b.Connection.AddCallback("303", b.handleISONResponse)

	// Handle error replies for nick changes
	b.Connection.AddCallback("433", func(e *irc.Event) {
		if e.Arguments[0] == b.CurrentNick {
			util.Warning("Bot %s attempted to change nick to %s, but it's already in use", b.CurrentNick, e.Arguments[1])
			// Return nick to pool
			b.nickManager.ReturnNickToPool(e.Arguments[1])
		}
	})

	// Callback for private and public messages
	b.Connection.AddCallback("PRIVMSG", b.handlePrivMsg)

	// Callback for disconnection
	b.Connection.AddCallback("DISCONNECTED", func(e *irc.Event) {
		util.Warning("Bot %s disconnected from server", b.CurrentNick)
		b.isConnected = false
		if !b.isReconnecting && !b.gaveUp {
			go b.handleReconnect()
		} else if b.gaveUp {
			util.Info("Bot %s has given up on reconnecting", b.CurrentNick)
		}
	})
}

// handleISONResponse handles the ISON responses and forwards them to the NickManager
func (b *Bot) handleISONResponse(e *irc.Event) {
	isonResponse := strings.Fields(e.Message())
	util.Debug("Bot %s received ISON response: %v", b.CurrentNick, isonResponse)
	// Send the response to the NickManager via the channel
	select {
	case b.isonResponse <- isonResponse:
	default:
		util.Warning("Bot %s isonResponse channel is full", b.CurrentNick)
	}
}

// RequestISON sends an ISON command and waits for the response
func (b *Bot) RequestISON(nicks []string) ([]string, error) {
	if !b.IsConnected() {
		return nil, fmt.Errorf("bot %s is not connected", b.CurrentNick)
	}

	command := fmt.Sprintf("ISON %s", strings.Join(nicks, " "))
	util.Debug("Bot %s is sending ISON command: %s", b.CurrentNick, command)
	b.Connection.SendRaw(command)

	// Wait for the ISON response or timeout
	select {
	case response := <-b.isonResponse:
		return response, nil
	case <-time.After(10 * time.Second):
		return nil, fmt.Errorf("bot %s did not receive ISON response in time", b.CurrentNick)
	}
}

// ChangeNick attempts to change the bot's nick to a new one
func (b *Bot) ChangeNick(newNick string) {
	if b.IsConnected() {
		util.Info("Bot %s is attempting to change nick to %s", b.CurrentNick, newNick)
		b.Connection.Nick(newNick)
	} else {
		util.Debug("Bot %s is not connected; cannot change nick", b.CurrentNick)
	}
}

// JoinChannel joins a specified channel
func (b *Bot) JoinChannel(channel string) {
	if b.IsConnected() {
		util.Debug("Bot %s is joining channel %s", b.CurrentNick, channel)
		b.Connection.Join(channel)
	} else {
		util.Debug("Bot %s is not connected; cannot join channel %s", b.CurrentNick, channel)
	}
}

// PartChannel leaves a specified channel
func (b *Bot) PartChannel(channel string) {
	if b.IsConnected() {
		util.Debug("Bot %s is leaving channel %s", b.CurrentNick, channel)
		b.Connection.Part(channel)
	} else {
		util.Debug("Bot %s is not connected; cannot part channel %s", b.CurrentNick, channel)
	}
}

// Reconnect disconnects and reconnects the bot to the IRC server
func (b *Bot) Reconnect() {
	if b.IsConnected() {
		b.Quit("Reconnecting")
	}
	time.Sleep(5 * time.Second)
	err := b.Connect()
	if err != nil {
		util.Error("Failed to reconnect bot %s: %v", b.CurrentNick, err)
	}
}

// handleReconnect handles reconnection attempts after disconnection
func (b *Bot) handleReconnect() {
	b.isReconnecting = true
	defer func() { b.isReconnecting = false }()

	maxRetries := b.GlobalConfig.ReconnectRetries
	retryInterval := time.Duration(b.GlobalConfig.ReconnectInterval) * time.Second

	for attempts := 0; attempts < maxRetries; attempts++ {
		util.Info("Bot %s is attempting to reconnect (attempt %d/%d)", b.CurrentNick, attempts+1, maxRetries)
		err := b.connectWithRetry()
		if err == nil {
			util.Info("Bot %s reconnected", b.CurrentNick)
			return
		}
		util.Error("Attempt %d failed: %v", attempts+1, err)
		time.Sleep(retryInterval)
	}

	util.Error("Bot %s could not reconnect after %d attempts", b.CurrentNick, maxRetries)
	b.gaveUp = true
}

// SendMessage sends a message to a specified target (channel or user)
func (b *Bot) SendMessage(target, message string) {
	if b.IsConnected() {
		util.Debug("Bot %s is sending message to %s: %s", b.CurrentNick, target, message)
		b.Connection.Privmsg(target, message)
	} else {
		util.Debug("Bot %s is not connected; cannot send message to %s", b.CurrentNick, target)
	}
}

// SendNotice sends a notice to a specified target (channel or user)
func (b *Bot) SendNotice(target, message string) {
	if b.IsConnected() {
		util.Debug("Bot %s is sending notice to %s: %s", b.CurrentNick, target, message)
		b.Connection.Notice(target, message)
	} else {
		util.Debug("Bot %s is not connected; cannot send notice to %s", b.CurrentNick, target)
	}
}

// Quit disconnects the bot from the IRC server
func (b *Bot) Quit(message string) {
	if b.IsConnected() {
		util.Info("Bot %s is disconnecting: %s", b.CurrentNick, message)
		b.Connection.QuitMessage = message
		b.Connection.Quit()
		b.isConnected = false
	}
}

// AttemptNickChange attempts to change the bot's nick to an available nick
func (b *Bot) AttemptNickChange(nick string) {
	util.Debug("Bot %s received request to change nick to %s", b.CurrentNick, nick)
	if b.shouldChangeNick(nick) {
		util.Info("Bot %s is attempting to change nick to %s", b.CurrentNick, nick)
		b.ChangeNick(nick)
	} else {
		util.Debug("Bot %s decided not to change nick to %s", b.CurrentNick, nick)
		b.nickManager.ReturnNickToPool(nick)
	}
}

// shouldChangeNick determines if the bot should change its nick
func (b *Bot) shouldChangeNick(nick string) bool {
	// Check if current nick is already a target nick
	if util.IsTargetNick(b.CurrentNick, b.nickManager.GetNicksToCatch()) {
		return false
	}
	return b.CurrentNick != nick
}

// handlePrivMsg handles private and public messages and owner commands
func (b *Bot) handlePrivMsg(e *irc.Event) {
	// Delegate command handling to HandleCommands in commands.go
	b.HandleCommands(e)
}

// shouldHandleCommand determines if this bot should handle the command
func (b *Bot) shouldHandleCommand() bool {
	return b.botManager.ShouldHandleCommand(b)
}

// SetOwnerList sets the list of owners for the bot
func (b *Bot) SetOwnerList(owners auth.OwnerList) {
	b.owners = owners
	util.Debug("Bot %s set owners: %v", b.CurrentNick, owners)
}

// SetChannels sets the list of channels for the bot to join
func (b *Bot) SetChannels(channels []string) {
	b.channels = channels
	util.Debug("Bot %s set channels: %v", b.CurrentNick, channels)
}

// GetCurrentNick returns the bot's current nick
func (b *Bot) GetCurrentNick() string {
	return b.CurrentNick
}

# Koniec /Users/kfn/gognb/internal/bot/bot.go

# Plik /Users/kfn/gognb/internal/bot/commands.go
package bot

import (
	"fmt"
	"strings"

	"github.com/kofany/gNb/internal/auth"
	irc "github.com/kofany/go-ircevent"
)

// HandleCommands processes owner commands received by the bot.
func (b *Bot) HandleCommands(e *irc.Event) {
	message := e.Message()
	sender := e.Nick

	// Check if message starts with any command prefixes
	if !startsWithAny(message, b.GlobalConfig.CommandPrefixes) {
		return
	}

	// Check if sender is an owner
	if !auth.IsOwner(e, b.owners) {
		return
	}

	// Before processing the command, check if this bot should handle it
	if !b.shouldHandleCommand() {
		return
	}

	// Parse the command
	commandLine := strings.TrimLeft(message, strings.Join(b.GlobalConfig.CommandPrefixes, ""))
	args := strings.Fields(commandLine)

	if len(args) == 0 {
		return
	}

	// Handle commands
	switch strings.ToLower(args[0]) {
	case "quit":
		b.Quit("Command from owner")
	case "say":
		if len(args) >= 3 {
			targetChannel := args[1]
			msg := strings.Join(args[2:], " ")
			b.SendMessage(targetChannel, msg)
		} else {
			b.SendNotice(sender, "Usage: say <channel> <message>")
		}
	case "join":
		if len(args) >= 2 {
			channel := args[1]
			b.JoinChannel(channel)
		} else {
			b.SendNotice(sender, "Usage: join <channel>")
		}
	case "part":
		if len(args) >= 2 {
			channel := args[1]
			b.PartChannel(channel)
		} else {
			b.SendNotice(sender, "Usage: part <channel>")
		}
	case "reconnect":
		b.Reconnect()
	// New commands for nick management
	case "addnick":
		b.handleAddNickCommand(args, sender)
	case "delnick":
		b.handleDelNickCommand(args, sender)
	case "listnicks":
		b.handleListNicksCommand(sender)
	// New commands for owner management
	case "addowner":
		b.handleAddOwnerCommand(args, sender)
	case "delowner":
		b.handleDelOwnerCommand(args, sender)
	case "listowners":
		b.handleListOwnersCommand(sender)
	default:
		b.SendNotice(sender, "Unknown command")
	}
}

// Helper function to check if the string starts with any of the provided prefixes
func startsWithAny(s string, prefixes []string) bool {
	for _, prefix := range prefixes {
		if strings.HasPrefix(s, prefix) {
			return true
		}
	}
	return false
}

// Command handlers for nick management

func (b *Bot) handleAddNickCommand(args []string, sender string) {
	if len(args) >= 2 {
		nick := args[1]
		err := b.nickManager.AddNick(nick)
		if err != nil {
			b.SendNotice(sender, fmt.Sprintf("Error adding nick: %v", err))
		} else {
			b.SendNotice(sender, fmt.Sprintf("Nick '%s' has been added.", nick))
		}
	} else {
		b.SendNotice(sender, "Usage: addnick <nick>")
	}
}

func (b *Bot) handleDelNickCommand(args []string, sender string) {
	if len(args) >= 2 {
		nick := args[1]
		err := b.nickManager.RemoveNick(nick)
		if err != nil {
			b.SendNotice(sender, fmt.Sprintf("Error removing nick: %v", err))
		} else {
			b.SendNotice(sender, fmt.Sprintf("Nick '%s' has been removed.", nick))
		}
	} else {
		b.SendNotice(sender, "Usage: delnick <nick>")
	}
}

func (b *Bot) handleListNicksCommand(sender string) {
	nicks := b.nickManager.GetNicks()
	b.SendNotice(sender, fmt.Sprintf("Current nicks: %s", strings.Join(nicks, ", ")))
}

// Command handlers for owner management

func (b *Bot) handleAddOwnerCommand(args []string, sender string) {
	if len(args) >= 2 {
		ownerMask := args[1]
		err := b.botManager.AddOwner(ownerMask)
		if err != nil {
			b.SendNotice(sender, fmt.Sprintf("Error adding owner: %v", err))
		} else {
			b.SendNotice(sender, fmt.Sprintf("Owner '%s' has been added.", ownerMask))
		}
	} else {
		b.SendNotice(sender, "Usage: addowner <mask>")
	}
}

func (b *Bot) handleDelOwnerCommand(args []string, sender string) {
	if len(args) >= 2 {
		ownerMask := args[1]
		err := b.botManager.RemoveOwner(ownerMask)
		if err != nil {
			b.SendNotice(sender, fmt.Sprintf("Error removing owner: %v", err))
		} else {
			b.SendNotice(sender, fmt.Sprintf("Owner '%s' has been removed.", ownerMask))
		}
	} else {
		b.SendNotice(sender, "Usage: delowner <mask>")
	}
}

func (b *Bot) handleListOwnersCommand(sender string) {
	owners := b.botManager.GetOwners()
	b.SendNotice(sender, fmt.Sprintf("Current owners: %s", strings.Join(owners, ", ")))
}

# Koniec /Users/kfn/gognb/internal/bot/commands.go

# Plik /Users/kfn/gognb/internal/bot/manager.go
package bot

import (
	"encoding/json"
	"fmt"
	"os"
	"sync"

	"github.com/kofany/gNb/internal/auth"
	"github.com/kofany/gNb/internal/config"
	"github.com/kofany/gNb/internal/types"
	"github.com/kofany/gNb/internal/util"
)

// Ensure BotManager implements types.BotManager
var _ types.BotManager = (*BotManager)(nil)

// BotManager manages multiple IRC bots
type BotManager struct {
	bots            []types.Bot
	owners          auth.OwnerList
	wg              sync.WaitGroup
	stopChan        chan struct{}
	nickManager     types.NickManager
	commandBotIndex int
	mutex           sync.Mutex
}

// NewBotManager creates a new BotManager instance
func NewBotManager(cfg *config.Config, owners auth.OwnerList, nm types.NickManager) *BotManager {
	manager := &BotManager{
		bots:        make([]types.Bot, len(cfg.Bots)),
		owners:      owners,
		stopChan:    make(chan struct{}),
		nickManager: nm,
	}

	// Creating bots
	for i, botCfg := range cfg.Bots {
		bot := NewBot(&botCfg, &cfg.Global, nm, manager)
		bot.SetOwnerList(manager.owners)
		bot.SetChannels(cfg.Channels)
		manager.bots[i] = bot
		util.Debug("BotManager added bot %s", bot.GetCurrentNick())
	}

	nm.SetBots(manager.bots)
	return manager
}

// StartBots starts all bots and connects them to their servers
func (bm *BotManager) StartBots() {
	for _, bot := range bm.bots {
		err := bot.Connect()
		if err != nil {
			util.Error("Failed to connect bot: %v", err)
			continue
		}
	}
}

// Stop safely shuts down all bots
func (bm *BotManager) Stop() {
	close(bm.stopChan)
	bm.wg.Wait()
	for _, bot := range bm.bots {
		bot.Quit("Shutting down")
	}
	util.Info("All bots have been stopped.")
}

// ShouldHandleCommand determines if a given bot should handle a command
func (bm *BotManager) ShouldHandleCommand(bot types.Bot) bool {
	bm.mutex.Lock()
	defer bm.mutex.Unlock()

	if len(bm.bots) == 0 {
		return false
	}

	if bm.bots[bm.commandBotIndex] == bot {
		// Move index to next bot
		bm.commandBotIndex = (bm.commandBotIndex + 1) % len(bm.bots)
		util.Debug("BotManager: Bot %s will handle the command", bot.GetCurrentNick())
		return true
	}
	util.Debug("BotManager: Bot %s will not handle the command", bot.GetCurrentNick())
	return false
}

func (bm *BotManager) AddOwner(ownerMask string) error {
	bm.mutex.Lock()
	defer bm.mutex.Unlock()

	// Sprawdź, czy owner już istnieje
	for _, owner := range bm.owners.Owners {
		if owner == ownerMask {
			return fmt.Errorf("owner '%s' already exists", ownerMask)
		}
	}

	bm.owners.Owners = append(bm.owners.Owners, ownerMask)

	// Zapisz do pliku
	return bm.saveOwnersToFile()
}

func (bm *BotManager) RemoveOwner(ownerMask string) error {
	bm.mutex.Lock()
	defer bm.mutex.Unlock()

	index := -1
	for i, owner := range bm.owners.Owners {
		if owner == ownerMask {
			index = i
			break
		}
	}

	if index == -1 {
		return fmt.Errorf("owner '%s' not found", ownerMask)
	}

	bm.owners.Owners = append(bm.owners.Owners[:index], bm.owners.Owners[index+1:]...)

	// Zapisz do pliku
	return bm.saveOwnersToFile()
}

func (bm *BotManager) GetOwners() []string {
	bm.mutex.Lock()
	defer bm.mutex.Unlock()

	ownersCopy := make([]string, len(bm.owners.Owners))
	copy(ownersCopy, bm.owners.Owners)
	return ownersCopy
}

func (bm *BotManager) saveOwnersToFile() error {
	jsonData, err := json.MarshalIndent(bm.owners, "", "  ")
	if err != nil {
		return err
	}

	err = os.WriteFile("configs/owners.json", jsonData, 0644)
	if err != nil {
		return err
	}

	// Zaktualizuj listę właścicieli w botach
	for _, bot := range bm.bots {
		bot.SetOwnerList(bm.owners)
	}

	return nil
}

# Koniec /Users/kfn/gognb/internal/bot/manager.go

# Plik /Users/kfn/gognb/internal/config/config.go
package config

import (
	"fmt"
	"os"

	"gopkg.in/yaml.v2"
)

type Config struct {
	Global   GlobalConfig `yaml:"global"`
	Bots     []BotConfig  `yaml:"bots"`
	Channels []string     `yaml:"channels"`
}

type GlobalConfig struct {
	LogLevel          string   `yaml:"log_level"`
	IsonInterval      int      `yaml:"ison_interval"`
	MaxNickLength     int      `yaml:"max_nick_length"`
	CommandPrefixes   []string `yaml:"owner_command_prefixes"`
	NickAPI           NickAPI  `yaml:"nick_api"`
	Channels          []string `yaml:"channels"`
	ReconnectRetries  int      `yaml:"reconnect_retries"`
	ReconnectInterval int      `yaml:"reconnect_interval"`
}

type NickAPI struct {
	URL           string `yaml:"url"`
	MaxWordLength int    `yaml:"max_word_length"`
	Timeout       int    `yaml:"timeout"`
}

type BotConfig struct {
	Server string `yaml:"server"`
	Port   int    `yaml:"port"`
	SSL    bool   `yaml:"ssl"`
	Vhost  string `yaml:"vhost"`
}

func LoadConfig(filename string) (*Config, error) {
	data, err := os.ReadFile(filename)
	if err != nil {
		return nil, err
	}
	var config Config
	err = yaml.Unmarshal(data, &config)
	if err != nil {
		return nil, err
	}
	return &config, nil
}

func (cfg *BotConfig) ServerAddress() string {
	return fmt.Sprintf("%s:%d", cfg.Server, cfg.Port)
}

# Koniec /Users/kfn/gognb/internal/config/config.go

# Plik /Users/kfn/gognb/internal/irc/client.go
package irc

import (
	"fmt"
	"strings"

	"github.com/kofany/gNb/internal/util"
	irc "github.com/kofany/go-ircevent"
)

// Client is an abstraction of an IRC connection
type Client struct {
	Connection  *irc.Connection
	Server      string
	Port        int
	Nick        string
	Username    string
	Realname    string
	Vhost       string
	SSL         bool
	IsConnected bool
}

// NewClient creates a new IRC client instance
func NewClient(server string, port int, nick, username, realname, vhost string, ssl bool) *Client {
	return &Client{
		Server:   server,
		Port:     port,
		Nick:     nick,
		Username: username,
		Realname: realname,
		Vhost:    vhost,
		SSL:      ssl,
	}
}

// Connect establishes a connection to the IRC server
func (c *Client) Connect() error {
	c.Connection = irc.IRC(c.Nick, c.Username, c.Vhost)
	c.Connection.VerboseCallbackHandler = false
	c.Connection.Debug = false
	c.Connection.UseTLS = c.SSL
	c.Connection.RealName = c.Realname

	err := c.Connection.Connect(fmt.Sprintf("%s:%d", c.Server, c.Port))
	if err != nil {
		return fmt.Errorf("failed to connect to %s:%d - %v", c.Server, c.Port, err)
	}

	c.IsConnected = true

	// Callback upon successful connection
	c.Connection.AddCallback("001", func(e *irc.Event) {
		util.Info("Connected to %s as %s", c.Server, c.Nick)
	})

	// Handle PING/PONG
	c.Connection.AddCallback("PING", func(e *irc.Event) {
		c.Connection.SendRawf("PONG :%s", e.Message())
	})

	// Start the event handling loop
	go c.Connection.Loop()
	return nil
}

// Disconnect disconnects the client from the IRC server
func (c *Client) Disconnect() {
	if c.IsConnected {
		c.Connection.Quit()
		c.IsConnected = false
	}
}

// Join joins the specified channel
func (c *Client) Join(channel string) {
	if c.IsConnected {
		c.Connection.Join(channel)
	}
}

// Part leaves the specified channel
func (c *Client) Part(channel string) {
	if c.IsConnected {
		c.Connection.Part(channel)
	}
}

// SendMessage sends a message to the specified target
func (c *Client) SendMessage(target, message string) {
	if c.IsConnected {
		c.Connection.Privmsg(target, message)
	}
}

// SendNotice sends a notice to the specified target
func (c *Client) SendNotice(target, message string) {
	if c.IsConnected {
		c.Connection.Notice(target, message)
	}
}

// ChangeNick changes the client's nick
func (c *Client) ChangeNick(newNick string) {
	if c.IsConnected {
		c.Connection.Nick(newNick)
		c.Nick = newNick
	}
}

// AddCallback adds a callback for the specified IRC event
func (c *Client) AddCallback(event string, callback func(*irc.Event)) {
	c.Connection.AddCallback(event, callback)
}

// SendRaw sends a raw IRC message
func (c *Client) SendRaw(message string) {
	if c.IsConnected {
		c.Connection.SendRaw(message)
	}
}

// SendISON sends an ISON command with a list of nicknames
func (c *Client) SendISON(nicks []string) {
	if c.IsConnected {
		c.Connection.SendRawf("ISON %s", strings.Join(nicks, " "))
	}
}

# Koniec /Users/kfn/gognb/internal/irc/client.go

# Plik /Users/kfn/gognb/internal/irc/parser.go
package irc

import (
	"regexp"
	"strings"
)

// Event represents a parsed IRC message
type Event struct {
	Raw     string
	Source  string
	Nick    string
	User    string
	Host    string
	Command string
	Args    []string
	Message string
}

// ParseIRCMessage parses a raw IRC message into an Event structure
func ParseIRCMessage(raw string) *Event {
	e := &Event{
		Raw: raw,
	}

	// Parse prefix
	if strings.HasPrefix(raw, ":") {
		parts := strings.SplitN(raw[1:], " ", 2)
		e.Source = parts[0]
		raw = parts[1]

		// Parse nick!user@host
		re := regexp.MustCompile(`^(?P<Nick>[^!]+)!?(?P<User>[^@]*)@?(?P<Host>.*)$`)
		match := re.FindStringSubmatch(e.Source)
		if match != nil {
			e.Nick = match[1]
			e.User = match[2]
			e.Host = match[3]
		} else {
			e.Nick = e.Source
		}
	}

	// Parse command and arguments
	if idx := strings.Index(raw, " :"); idx != -1 {
		e.Args = strings.Fields(raw[:idx])
		e.Message = raw[idx+2:]
	} else {
		e.Args = strings.Fields(raw)
	}

	if len(e.Args) > 0 {
		e.Command = strings.ToUpper(e.Args[0])
		e.Args = e.Args[1:]
	}

	return e
}

# Koniec /Users/kfn/gognb/internal/irc/parser.go

# Plik /Users/kfn/gognb/internal/nickmanager/nickmanager.go
package nickmanager

import (
	"encoding/json"
	"fmt"
	"os"
	"sync"
	"time"

	"github.com/kofany/gNb/internal/types"
	"github.com/kofany/gNb/internal/util"
)

type NickManager struct {
	nicksToCatch   []string
	priorityNicks  []string
	secondaryNicks []string
	bots           []types.Bot
	botIndex       int
	mutex          sync.Mutex
	isonInterval   time.Duration
}

type NicksData struct {
	Nicks []string `json:"nicks"`
}

func NewNickManager() *NickManager {
	return &NickManager{}
}

func (nm *NickManager) LoadNicks(filename string) error {
	nm.mutex.Lock()
	defer nm.mutex.Unlock()

	data, err := os.ReadFile(filename)
	if err != nil {
		return err
	}

	var nicksData NicksData
	if err := json.Unmarshal(data, &nicksData); err != nil {
		return err
	}

	nm.priorityNicks = nicksData.Nicks

	// Add single-letter nicks to secondary nicks
	letters := "abcdefghijklmnopqrstuvwxyz"
	for _, c := range letters {
		nick := string(c)
		nm.secondaryNicks = append(nm.secondaryNicks, nick)
	}

	// Combine both lists into nicksToCatch
	nm.nicksToCatch = append(nm.priorityNicks, nm.secondaryNicks...)

	return nil
}

func (nm *NickManager) Start() {
	go nm.monitorNicks()
}

func (nm *NickManager) monitorNicks() {
	for {
		nm.mutex.Lock()
		if len(nm.bots) == 0 {
			nm.mutex.Unlock()
			time.Sleep(1 * time.Second)
			continue
		}

		// Get the next bot in the queue to send ISON
		bot := nm.bots[nm.botIndex]
		nm.botIndex = (nm.botIndex + 1) % len(nm.bots)
		nm.mutex.Unlock()

		if bot.IsConnected() {
			// Request ISON and wait for response
			onlineNicks, err := bot.RequestISON(nm.nicksToCatch)
			if err != nil {
				util.Error("Error requesting ISON from bot %s: %v", bot.GetCurrentNick(), err)
				time.Sleep(1 * time.Second)
				continue
			}
			nm.handleISONResponse(onlineNicks)
		} else {
			util.Debug("Bot %s is not connected; skipping", bot.GetCurrentNick())
		}

		// Wait before sending the next ISON
		time.Sleep(time.Duration(nm.isonInterval) * time.Second)
	}
}

func (nm *NickManager) handleISONResponse(onlineNicks []string) {
	nm.mutex.Lock()
	defer nm.mutex.Unlock()

	util.Debug("NickManager received ISON response: %v", onlineNicks)

	// Determine available nicks
	var availablePriorityNicks []string
	var availableSecondaryNicks []string

	for _, nick := range nm.priorityNicks {
		if !util.Contains(onlineNicks, nick) {
			availablePriorityNicks = append(availablePriorityNicks, nick)
		}
	}

	for _, nick := range nm.secondaryNicks {
		if !util.Contains(onlineNicks, nick) {
			availableSecondaryNicks = append(availableSecondaryNicks, nick)
		}
	}

	// Get list of available bots
	availableBots := nm.getAvailableBots()
	if len(availableBots) == 0 {
		util.Debug("No available bots to assign nicks")
		return
	}

	assignedBots := 0

	// Assign priority nicks first
	for assignedBots < len(availableBots) && len(availablePriorityNicks) > 0 {
		nick := availablePriorityNicks[0]
		availablePriorityNicks = availablePriorityNicks[1:]
		bot := availableBots[assignedBots]
		assignedBots++
		util.Debug("Assigning priority nick %s to bot %s", nick, bot.GetCurrentNick())
		go bot.AttemptNickChange(nick)
	}

	// Then assign secondary nicks
	for assignedBots < len(availableBots) && len(availableSecondaryNicks) > 0 {
		nick := availableSecondaryNicks[0]
		availableSecondaryNicks = availableSecondaryNicks[1:]
		bot := availableBots[assignedBots]
		assignedBots++
		util.Debug("Assigning secondary nick %s to bot %s", nick, bot.GetCurrentNick())
		go bot.AttemptNickChange(nick)
	}
}

func (nm *NickManager) RegisterBot(bot types.Bot) {
	nm.mutex.Lock()
	defer nm.mutex.Unlock()
	nm.bots = append(nm.bots, bot)
}

func (nm *NickManager) SetBots(bots []types.Bot) {
	nm.mutex.Lock()
	defer nm.mutex.Unlock()
	nm.bots = bots
}

func (nm *NickManager) getAvailableBots() []types.Bot {
	var availableBots []types.Bot
	for _, bot := range nm.bots {
		if bot.IsConnected() && !util.IsTargetNick(bot.GetCurrentNick(), nm.nicksToCatch) {
			availableBots = append(availableBots, bot)
		}
	}
	return availableBots
}

func (nm *NickManager) ReturnNickToPool(nick string) {
	// No action needed since we check availability each time
}

func (nm *NickManager) GetNicksToCatch() []string {
	nm.mutex.Lock()
	defer nm.mutex.Unlock()
	nicksCopy := make([]string, len(nm.nicksToCatch))
	copy(nicksCopy, nm.nicksToCatch)
	return nicksCopy
}

func (nm *NickManager) AddNick(nick string) error {
	nm.mutex.Lock()
	defer nm.mutex.Unlock()

	// Sprawdź, czy nick już istnieje
	for _, n := range nm.priorityNicks {
		if n == nick {
			return fmt.Errorf("nick '%s' already exists", nick)
		}
	}

	// Dodaj nick do listy priorytetowej
	nm.priorityNicks = append(nm.priorityNicks, nick)
	nm.nicksToCatch = append(nm.nicksToCatch, nick)

	// Zapisz do pliku
	return nm.saveNicksToFile()
}

func (nm *NickManager) RemoveNick(nick string) error {
	nm.mutex.Lock()
	defer nm.mutex.Unlock()

	// Usuń nick z listy priorytetowej
	index := -1
	for i, n := range nm.priorityNicks {
		if n == nick {
			index = i
			break
		}
	}

	if index == -1 {
		return fmt.Errorf("nick '%s' not found", nick)
	}

	nm.priorityNicks = append(nm.priorityNicks[:index], nm.priorityNicks[index+1:]...)

	// Usuń nick z listy nicksToCatch
	index = -1
	for i, n := range nm.nicksToCatch {
		if n == nick {
			index = i
			break
		}
	}

	if index != -1 {
		nm.nicksToCatch = append(nm.nicksToCatch[:index], nm.nicksToCatch[index+1:]...)
	}

	// Zapisz do pliku
	return nm.saveNicksToFile()
}

func (nm *NickManager) GetNicks() []string {
	nm.mutex.Lock()
	defer nm.mutex.Unlock()

	nicksCopy := make([]string, len(nm.priorityNicks))
	copy(nicksCopy, nm.priorityNicks)
	return nicksCopy
}

func (nm *NickManager) saveNicksToFile() error {
	data := NicksData{
		Nicks: nm.priorityNicks,
	}

	jsonData, err := json.MarshalIndent(data, "", "  ")
	if err != nil {
		return err
	}

	return os.WriteFile("data/nicks.json", jsonData, 0644)
}

# Koniec /Users/kfn/gognb/internal/nickmanager/nickmanager.go

# Plik /Users/kfn/gognb/internal/types/interfaces.go
package types

import "github.com/kofany/gNb/internal/auth"

type Bot interface {
	AttemptNickChange(nick string)
	GetCurrentNick() string
	IsConnected() bool
	SetOwnerList(owners auth.OwnerList)
	SetChannels(channels []string)
	RequestISON(nicks []string) ([]string, error)
	Connect() error
	Quit(message string)
	Reconnect()
}

type NickManager interface {
	RegisterBot(bot Bot)
	ReturnNickToPool(nick string)
	SetBots(bots []Bot)
	GetNicksToCatch() []string
	AddNick(nick string) error
	RemoveNick(nick string) error
	GetNicks() []string
}
type BotManager interface {
	ShouldHandleCommand(bot Bot) bool
	AddOwner(ownerMask string) error
	RemoveOwner(ownerMask string) error
	GetOwners() []string
}

# Koniec /Users/kfn/gognb/internal/types/interfaces.go

# Plik /Users/kfn/gognb/internal/util/helpers.go
package util

import "strings"

// Contains checks if a slice contains a specific string
func Contains(slice []string, item string) bool {
	for _, s := range slice {
		if s == item {
			return true
		}
	}
	return false
}

// IsTargetNick checks if a nick is a target nick to catch
func IsTargetNick(nick string, targetNicks []string) bool {
	nick = strings.ToLower(nick)
	for _, target := range targetNicks {
		if strings.ToLower(target) == nick {
			return true
		}
	}
	return false
}

# Koniec /Users/kfn/gognb/internal/util/helpers.go

# Plik /Users/kfn/gognb/internal/util/iputil.go
package util

import (
	"bytes"
	"fmt"
	"net"
	"strings"
)

// IsValidIP checks if the given string is a valid IP address
func IsValidIP(ip string) bool {
	return net.ParseIP(ip) != nil
}

// IsIPv4 checks if the given string is a valid IPv4 address
func IsIPv4(ip string) bool {
	parsedIP := net.ParseIP(ip)
	return parsedIP != nil && parsedIP.To4() != nil
}

// IsIPv6 checks if the given string is a valid IPv6 address
func IsIPv6(ip string) bool {
	parsedIP := net.ParseIP(ip)
	return parsedIP != nil && parsedIP.To4() == nil
}

// ParseCIDR parses CIDR notation and returns IP and subnet mask
func ParseCIDR(cidr string) (net.IP, *net.IPNet, error) {
	return net.ParseCIDR(cidr)
}

// IsIPInRange checks if an IP address is within a CIDR range
func IsIPInRange(ip string, cidr string) (bool, error) {
	parsedIP := net.ParseIP(ip)
	if parsedIP == nil {
		return false, fmt.Errorf("invalid IP address: %s", ip)
	}

	_, ipNet, err := net.ParseCIDR(cidr)
	if err != nil {
		return false, fmt.Errorf("invalid CIDR: %s", cidr)
	}

	return ipNet.Contains(parsedIP), nil
}

// ExpandIPv6 expands a shortened IPv6 address to its full form
func ExpandIPv6(ip string) string {
	parsedIP := net.ParseIP(ip)
	if parsedIP == nil || parsedIP.To4() != nil {
		return ip // Return original if not a valid IPv6
	}
	return strings.ToUpper(fmt.Sprintf("%032x", []byte(parsedIP.To16())))
}

// CompareIPs compares two IP addresses
func CompareIPs(ip1, ip2 string) (int, error) {
	parsedIP1 := net.ParseIP(ip1)
	parsedIP2 := net.ParseIP(ip2)

	if parsedIP1 == nil {
		return 0, fmt.Errorf("invalid IP address: %s", ip1)
	}
	if parsedIP2 == nil {
		return 0, fmt.Errorf("invalid IP address: %s", ip2)
	}

	return bytes.Compare(parsedIP1, parsedIP2), nil
}

// IsPrivateIP checks if the IP address is private
func IsPrivateIP(ip string) bool {
	parsedIP := net.ParseIP(ip)
	if parsedIP == nil {
		return false
	}

	privateIPBlocks := []string{
		"10.0.0.0/8",
		"172.16.0.0/12",
		"192.168.0.0/16",
		"fc00::/7",
	}

	for _, block := range privateIPBlocks {
		_, ipNet, err := net.ParseCIDR(block)
		if err != nil {
			continue
		}
		if ipNet.Contains(parsedIP) {
			return true
		}
	}
	return false
}

# Koniec /Users/kfn/gognb/internal/util/iputil.go

# Plik /Users/kfn/gognb/internal/util/logger.go
package util

import (
	"fmt"
	"log"
	"os"
	"strings"
	"sync"
)

type LogLevel int

const (
	DEBUG LogLevel = iota
	INFO
	WARNING
	ERROR
)

var (
	logger      *log.Logger
	logLevel    LogLevel
	logMutex    sync.Mutex
	logFile     *os.File
	initialized bool
)

// InitLogger initializes the logger with the specified level and filename.
func InitLogger(level LogLevel, filename string) error {
	logMutex.Lock()
	defer logMutex.Unlock()

	if initialized {
		return fmt.Errorf("logger is already initialized")
	}

	logLevel = level

	file, err := os.OpenFile(filename, os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0644)
	if err != nil {
		return err
	}

	logger = log.New(file, "", log.LstdFlags)
	logFile = file
	initialized = true
	return nil
}

// CloseLogger closes the log file.
func CloseLogger() {
	logMutex.Lock()
	defer logMutex.Unlock()

	if initialized {
		logFile.Close()
		initialized = false
	}
}

// logMessage logs a message at the specified level.
func logMessage(level LogLevel, format string, args ...interface{}) {
	logMutex.Lock()
	defer logMutex.Unlock()

	if !initialized || level < logLevel {
		return
	}

	msg := fmt.Sprintf(format, args...)
	prefix := ""
	switch level {
	case DEBUG:
		prefix = "DEBUG: "
	case INFO:
		prefix = "INFO: "
	case WARNING:
		prefix = "WARNING: "
	case ERROR:
		prefix = "ERROR: "
	}
	logger.SetPrefix(prefix)
	logger.Println(msg)

	// Also print to console
	fmt.Println(prefix + msg)
}

// Debug logs a message at DEBUG level.
func Debug(format string, args ...interface{}) {
	logMessage(DEBUG, format, args...)
}

// Info logs a message at INFO level.
func Info(format string, args ...interface{}) {
	logMessage(INFO, format, args...)
}

// Warning logs a message at WARNING level.
func Warning(format string, args ...interface{}) {
	logMessage(WARNING, format, args...)
}

// Error logs a message at ERROR level.
func Error(format string, args ...interface{}) {
	logMessage(ERROR, format, args...)
}

// ParseLogLevel parses the log level from a string.
func ParseLogLevel(levelStr string) (LogLevel, error) {
	switch strings.ToLower(levelStr) {
	case "debug":
		return DEBUG, nil
	case "info":
		return INFO, nil
	case "warning":
		return WARNING, nil
	case "error":
		return ERROR, nil
	default:
		return INFO, fmt.Errorf("unknown log level: %s", levelStr)
	}
}

# Koniec /Users/kfn/gognb/internal/util/logger.go

# Plik /Users/kfn/gognb/internal/util/matcher.go
package util

import (
	"regexp"
	"strings"
)

// Matcher is responsible for comparing IRC userhosts with masks.
type Matcher struct{}

// MatchUserHost checks if the full userhost matches the mask.
func (m *Matcher) MatchUserHost(mask, userHost string) bool {
	// Split mask and userHost into parts
	maskParts := strings.SplitN(mask, "!", 2)
	hostParts := strings.SplitN(userHost, "!", 2)
	if len(maskParts) != 2 || len(hostParts) != 2 {
		return false // Invalid format
	}

	maskIdentHost := strings.SplitN(maskParts[1], "@", 2)
	hostIdentHost := strings.SplitN(hostParts[1], "@", 2)
	if len(maskIdentHost) != 2 || len(hostIdentHost) != 2 {
		return false // Invalid format
	}

	maskIdent, maskHost := maskIdentHost[0], maskIdentHost[1]
	hostIdent, hostHost := hostIdentHost[0], hostIdentHost[1]

	// Check ident
	if !m.matchWildcard(maskIdent, hostIdent) {
		return false
	}

	// Check host/IP
	return m.MatchHost(maskHost, hostHost)
}

// MatchHost checks if the host matches the mask, including wildcards and IPv6 expansion.
func (m *Matcher) MatchHost(mask, host string) bool {
	// Special handling for IPv6
	if strings.Contains(host, ":") {
		host = ExpandIPv6(host)
	}

	return m.matchWildcard(mask, host)
}

// matchWildcard converts wildcard patterns to regex and matches the string.
func (m *Matcher) matchWildcard(pattern, str string) bool {
	// Escape regex special characters
	pattern = regexp.QuoteMeta(pattern)
	// Replace wildcards with regex equivalents
	pattern = strings.Replace(pattern, `\*`, ".*", -1)    // * matches any string
	pattern = strings.Replace(pattern, `\?`, ".", -1)     // ? matches any character
	pattern = strings.Replace(pattern, `\#`, "[0-9]", -1) // # matches any digit
	// Add start and end anchors
	pattern = "^" + pattern + "$"

	matched, _ := regexp.MatchString(pattern, str)
	return matched
}

# Koniec /Users/kfn/gognb/internal/util/matcher.go

# Plik /Users/kfn/gognb/internal/util/nickgen.go
package util

import (
	"encoding/json"
	"fmt"
	"io"
	"math/rand"
	"net/http"
	"strings"
	"time"
)

type APIResponse struct {
	Words []string `json:"words"`
}

func GenerateRandomNick(apiURL string, maxWordLength int, timeoutSeconds int) (string, error) {
	client := http.Client{
		Timeout: time.Duration(timeoutSeconds) * time.Second,
	}

	// Add parameters to URL
	fullURL := fmt.Sprintf("%s?upto=%d&count=100", apiURL, maxWordLength)

	resp, err := client.Get(fullURL)
	if err != nil {
		return "", fmt.Errorf("error fetching nicks from API: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return "", fmt.Errorf("API returned status %d", resp.StatusCode)
	}

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return "", fmt.Errorf("error reading API response: %v", err)
	}

	var apiResp APIResponse
	err = json.Unmarshal(body, &apiResp)
	if err != nil {
		return "", fmt.Errorf("error parsing API response: %v", err)
	}

	if len(apiResp.Words) == 0 {
		return "", fmt.Errorf("API returned no words")
	}

	// Filter words of appropriate length and letters only
	validWords := []string{}
	for _, word := range apiResp.Words {
		word = strings.TrimSpace(word)
		if len(word) >= 3 && len(word) <= maxWordLength && isAlpha(word) {
			validWords = append(validWords, capitalize(word))
		}
	}

	if len(validWords) == 0 {
		return "", fmt.Errorf("no suitable words after filtering")
	}

	// Randomly select one word
	nick := validWords[rand.Intn(len(validWords))]
	return nick, nil
}

func isAlpha(s string) bool {
	for _, r := range s {
		if !((r >= 'a' && r <= 'z') || (r >= 'A' && r <= 'Z')) {
			return false
		}
	}
	return true
}

func capitalize(s string) string {
	if len(s) == 0 {
		return s
	}
	return strings.ToUpper(string(s[0])) + strings.ToLower(s[1:])
}

func GenerateFallbackNick() string {
	return fmt.Sprintf("Bot%d", time.Now().UnixNano()%10000)
}

# Koniec /Users/kfn/gognb/internal/util/nickgen.go

# Plik /Users/kfn/gognb/scripts/run.sh

# Koniec /Users/kfn/gognb/scripts/run.sh

# Plik /Users/kfn/gognb/setup_git_ignore.sh
#!/bin/bash

# Sprawdź, czy jesteś w repozytorium git
if [ ! -d ".git" ]; then
  echo "To nie jest repozytorium git."
  exit 1
fi

# Upewnij się, że plik config.yaml istnieje
if [ ! -f "configs/config.yaml" ]; then
  echo "Plik configs/config.yaml nie istnieje."
  exit 1
fi

# Dodaj plik config.yaml do repozytorium (jeśli nie jest już śledzony)
git add configs/config.yaml
git commit -m "Add config.yaml to repository" || echo "config.yaml już śledzony"

# Zmień nazwę pliku na config.example.yaml
git mv configs/config.yaml configs/config.example.yaml
git commit -m "Rename config.yaml to config.example.yaml"

# Dodaj plik config.yaml, bot.log oraz skrypt do .gitignore
echo "configs/config.yaml" >> .gitignore
echo "bot.log" >> .gitignore
echo "setup_git_ignore.sh" >> .gitignore  # Dodajemy skrypt do .gitignore

# Dodaj zmiany do .gitignore
git add .gitignore
git commit -m "Add config.yaml, bot.log, and setup script to .gitignore"

# Usuń plik config.yaml z kontroli wersji (bez usuwania lokalnie)
git rm --cached configs/config.yaml
git commit -m "Stop tracking config.yaml"

# Wypchnij zmiany na GitHub
git push

echo "Proces zakończony pomyślnie!"

# Koniec /Users/kfn/gognb/setup_git_ignore.sh

