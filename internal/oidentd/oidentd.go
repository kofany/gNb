// internal/oidentd/oidentd.go

package oidentd

import (
	"bytes"
	"fmt"
	"os"
	"os/exec"
	"strings"
	"text/template"
	"time"

	"github.com/kofany/gNb/internal/config"
	"github.com/kofany/gNb/internal/util"
)

const oidentdConfigPath = "/etc/oidentd.conf"
const configTemplate = `# This is the system-wide configuration file for oidentd.
# Generated by PT-gNb Bot on: {{ .Timestamp }}
# See oidentd.conf(5) for more information.
default {
    default {
        deny spoof
        deny spoof_all
        deny spoof_privport
        allow random
        allow random_numeric
        deny numeric
        deny hide
        deny forward
    }
}
user root {
    default {
        force reply {{ .Idents }}
    }
}
`

type ConfigData struct {
	Timestamp string
	Idents    string
}

// SetupOidentd konfiguruje oidentd jeśli program jest uruchomiony jako root
func SetupOidentd(cfg *config.Config) error {
	// Sprawdź czy program jest uruchomiony jako root
	if os.Geteuid() != 0 {
		return fmt.Errorf("oidentd setup requires root privileges")
	}

	// Sprawdź czy to system Debian
	if !isDebianSystem() {
		return fmt.Errorf("oidentd setup requires Debian-based system")
	}

	// Oblicz wymaganą liczbę identów
	requiredIdents := len(cfg.Bots) + 10

	// Wygeneruj identy
	idents, err := generateIdents(requiredIdents)
	if err != nil {
		return fmt.Errorf("failed to generate idents: %v", err)
	}

	// Zaktualizuj konfigurację
	if err := updateOidentdConfig(idents); err != nil {
		return fmt.Errorf("failed to update oidentd config: %v", err)
	}

	// Zrestartuj usługę
	if err := restartOidentd(); err != nil {
		return fmt.Errorf("failed to restart oidentd: %v", err)
	}

	util.Info("Oidentd configured successfully with %d idents", len(idents))
	return nil
}

func isDebianSystem() bool {
	_, err := os.Stat("/etc/debian_version")
	return err == nil
}

// internal/oidentd/oidentd.go

func generateIdents(count int) ([]string, error) {
	// Wczytaj słowa z pliku gob
	source, err := util.LoadWordsFromGob("data/words.gob")
	if err != nil {
		return nil, fmt.Errorf("failed to load words from gob: %v", err)
	}

	// Pobierz większą ilość słów do filtrowania
	words, err := source.GetRandomWords(count * 3) // pobieramy 3x więcej słów do filtrowania
	if err != nil {
		return nil, fmt.Errorf("failed to get random words: %v", err)
	}

	// Filtruj i wybierz odpowiednie słowa
	var validWords []string
	for _, word := range words {
		word = strings.ToLower(word)
		if len(word) >= 3 && len(word) <= 9 && isValidIdent(word) {
			validWords = append(validWords, word)
		}
		if len(validWords) >= count {
			break
		}
	}

	if len(validWords) < count {
		return nil, fmt.Errorf("not enough valid words found: got %d, need %d", len(validWords), count)
	}

	// Używamy tylko potrzebnej liczby słów
	validWords = validWords[:count]

	// Dodaj cudzysłowy do identów
	idents := make([]string, len(validWords))
	for i, word := range validWords {
		idents[i] = `"` + word + `"`
	}

	return idents, nil
}

func isValidIdent(word string) bool {
	if len(word) == 0 || !isLetter(rune(word[0])) {
		return false
	}
	for _, r := range word {
		if !isLetter(r) && !isNumber(r) {
			return false
		}
	}
	return true
}

func isLetter(r rune) bool {
	return (r >= 'a' && r <= 'z') || (r >= 'A' && r <= 'Z')
}

func isNumber(r rune) bool {
	return r >= '0' && r <= '9'
}

func updateOidentdConfig(idents []string) error {
	tmpl, err := template.New("oidentd").Parse(configTemplate)
	if err != nil {
		return fmt.Errorf("failed to parse template: %v", err)
	}

	data := ConfigData{
		Timestamp: time.Now().Format("2006-01-02 15:04:05"),
		Idents:    strings.Join(idents, " "),
	}

	var buf bytes.Buffer
	if err := tmpl.Execute(&buf, data); err != nil {
		return fmt.Errorf("failed to execute template: %v", err)
	}

	if err := os.WriteFile(oidentdConfigPath, buf.Bytes(), 0644); err != nil {
		return fmt.Errorf("failed to write config file: %v", err)
	}

	return nil
}

func restartOidentd() error {
	cmd := exec.Command("systemctl", "restart", "oidentd.service")
	if err := cmd.Run(); err != nil {
		return fmt.Errorf("failed to restart oidentd service: %v", err)
	}
	return nil
}
